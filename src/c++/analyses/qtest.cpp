#include "analyses/qtest.h"
#include "analyses/gemma.h"
#include "utils/dcdflib.h"
#include "analyses/setmgr.h"
#include "analyses/regr.h"
#include "analyses/emai.h"
#include "analyses/ppp.h"
#include "analyses/corr.h"
#include "utils/stat.h"
#include "utils/vector.h"

#define WISARD_QTEST_DEFAULT_STT 0.2

#define WISARD_QTEST_N_PBIN	14412
#define WISARD_QTEST_TOTN	1000000000

namespace ONETOOL {

wsSym sym_sseMtM(wsReal **Ra_m1, wsUint N_r1, wsUint N_c1)
{
	wsUint i, j, k;

	wsSym Ra_ret = sseEmptySymMat(N_c1);
	for (i=0 ; i<N_r1 ; i++) {
		wsReal *Ra_i = Ra_m1[i];

		for (j=0 ; j<N_c1 ; j++) {
			wsUint N_med = 0;
#ifdef USE_SSE
			sse_t sse_A = sseSet(Ra_i[j]);
			N_med = getMed(j+1);
			for (k=0 ; k<N_med ; k+=sseJmp) {
				sse_t *sse_R = (sse_t *)(Ra_ret[j] + k);
				sse_t *sse_T = (sse_t *)(Ra_i + k);
				*sse_R = sseAdd(*sse_R, sseMul(sse_A, *sse_T));
			}
#endif
			for (k=N_med ; k<=j ; k++)

				Ra_ret[j][k] += Ra_i[j]*Ra_i[k];
		}
	}

	return Ra_ret;
}

/* !!! Qtest-specific analysis !!! */
#if ((TOOLSET_TYPE & 0x100) == 0x100) || (TOOLSET_TYPE & FUNCTION_QTEST)

/* 0 ~ 6.378 */
wsUint Na_freq_0_6378[] = {
	11471, 22190, 22148, 22285, 28067, 51833, 62465, 72920, 82547, 92673,
	102697, 111499, 122133, 131805, 141396, 150631, 160798, 169617, 179561, 188554,
	198523, 207815, 216208, 224699, 234738, 244749, 252764, 260900, 269892, 278012,
	287269, 295822, 304023, 312667, 320878, 328858, 336557, 345854, 353120, 361042,
	368735, 377237, 385753, 394319, 399784, 408197, 417290, 424127, 431646, 438566,
	445976, 452925, 461062, 468610, 475423, 482222, 490052, 497640, 504532, 510626,
	516446, 524403, 532156, 536542, 545251, 550590, 556656, 564591, 571002, 576081,
	582702, 589532, 596371, 603622, 605933, 613741, 620183, 627594, 632699, 637182,
	643927, 649337, 656150, 661968, 666576, 673865, 678107, 685047, 690544, 695601,
	700870, 706863, 712833, 716788, 720629, 726107, 732319, 736322, 742032, 748643,
	751234, 757892, 761910, 767754, 772232, 776690, 781058, 785992, 789992, 796328,
	799392, 804097, 809422, 814285, 818445, 822735, 824749, 829156, 834419, 839634,
	842967, 847336, 851237, 857167, 860155, 863865, 867761, 872360, 875758, 879837,
	884078, 886833, 890086, 893359, 897839, 901424, 904385, 907961, 911481, 917863,
	919897, 922151, 924536, 928788, 932858, 936647, 938306, 941986, 944938, 949293,
	953088, 955132, 958208, 960604, 963045, 968108, 969935, 971912, 975475, 978107,
	981755, 982267, 987206, 989719, 992242, 995354, 998796, 999751, 1004043, 1007870,
	1006841, 1012731, 1013575, 1015747, 1016222, 1020919, 1023870, 1023687, 1028260, 1028989,
	1034249, 1034202, 1038076, 1038323, 1041666, 1044465, 1045681, 1047792, 1051136, 1051246,
	1052669, 1054784, 1059416, 1060043, 1060476, 1063508, 1066691, 1066661, 1069157, 1070669,
	1071755, 1072653, 1076972, 1078155, 1078945, 1078819, 1082226, 1083248, 1085204, 1087477,
	1088444, 1089928, 1092671, 1093893, 1095666, 1096893, 1099344, 1098910, 1099253, 1100303,
	1101326, 1104874, 1105955, 1106998, 1109310, 1108975, 1108594, 1113125, 1111982, 1114453,
	1114034, 1115423, 1116955, 1116823, 1119535, 1123008, 1121759, 1125161, 1124667, 1124873,
	1124541, 1125844, 1128016, 1127806, 1129998, 1129087, 1129029, 1131811, 1134181, 1133438,
	1135825, 1135484, 1134050, 1136309, 1137507, 1136669, 1137865, 1138510, 1142584, 1139574,
	1137667, 1139239, 1141606, 1140715, 1142627, 1144693, 1143864, 1142104, 1143744, 1145106,
	1143661, 1144832, 1146810, 1145752, 1148540, 1146447, 1149893, 1147590, 1148082, 1147601,
	1146124, 1148058, 1148150, 1148912, 1151072, 1150403, 1150062, 1148321, 1148985, 1150990,
	1151573, 1151810, 1150413, 1150840, 1151304, 1151193, 1149386, 1151593, 1151606, 1151269,
	1150152, 1152777, 1152346, 1152474, 1150541, 1151711, 1150396, 1150597, 1150257, 1152163,
	1150723, 1149264, 1150706, 1148443, 1150488, 1149805, 1150965, 1150355, 1148856, 1149188,
	1149183, 1147685, 1147921, 1150019, 1147288, 1147147, 1147762, 1146791, 1144425, 1146205,
	1147450, 1145204, 1142640, 1146139, 1144839, 1144555, 1145081, 1145112, 1141289, 1143843,
	1143273, 1142600, 1141140, 1144076, 1140235, 1139791, 1139563, 1140112, 1140923, 1139057,
	1139860, 1137625, 1138099, 1136788, 1134248, 1134403, 1135076, 1136410, 1133435, 1132625,
	1134186, 1131608, 1131835, 1131270, 1131020, 1128799, 1127672, 1128335, 1129532, 1126453,
	1125830, 1125905, 1124805, 1123438, 1123250, 1122333, 1122738, 1121537, 1120782, 1120970,
	1119332, 1119024, 1117720, 1116284, 1115526, 1117362, 1114824, 1114958, 1112310, 1112677,
	1112323, 1111843, 1109381, 1110259, 1110073, 1108394, 1107299, 1106644, 1104435, 1103620,
	1102443, 1104385, 1102076, 1101506, 1102804, 1097989, 1098066, 1097330, 1093759, 1096508,
	1093990, 1093523, 1091901, 1092863, 1091687, 1090174, 1088903, 1088638, 1087423, 1085320,
	1083530, 1083461, 1084063, 1082665, 1081340, 1080096, 1079745, 1077862, 1077530, 1076997,
	1075713, 1074602, 1071991, 1073120, 1071983, 1069356, 1069592, 1067952, 1067333, 1066930,
	1064016, 1064316, 1061872, 1060985, 1059925, 1058869, 1057993, 1059140, 1057694, 1054795,
	1055431, 1052790, 1052843, 1051148, 1050476, 1046757, 1048353, 1046272, 1046013, 1043851,
	1041815, 1041553, 1042268, 1039871, 1036244, 1036938, 1034836, 1035240, 1033543, 1032994,
	1031606, 1029107, 1029285, 1028918, 1028961, 1024323, 1024296, 1023565, 1022324, 1020187,
	1021290, 1018211, 1017931, 1016225, 1017467, 1015749, 1013099, 1011541, 1011116, 1008916,
	1009505, 1006264, 1006575, 1003894, 1003966, 1002388, 1002221, 998596, 996242, 996964,
	998669, 993671, 994079, 992214, 990567, 989472, 988216, 986145, 986011, 983982,
	983347, 980795, 980102, 979904, 978515, 979888, 975367, 975278, 975082, 971386,
	970994, 968601, 969362, 966312, 967220, 963799, 963396, 961854, 960232, 958982,
	958003, 956144, 955282, 953032, 951789, 951477, 950130, 948461, 948552, 946727,
	944942, 941844, 941871, 940457, 940167, 938190, 935736, 934993, 934960, 931284,
	932613, 929956, 929703, 928287, 927110, 924696, 923041, 921948, 918729, 917674,
	915730, 916643, 915585, 913390, 911603, 910636, 910352, 907489, 906240, 905301,
	905701, 901276, 901503, 898253, 898400, 898267, 895285, 893001, 892389, 891876,
	890341, 888413, 886423, 887252, 884135, 883445, 880899, 880630, 878079, 877294,
	876461, 873671, 873799, 869951, 870183, 868518, 867354, 865833, 864079, 862881,
	864555, 862717, 860569, 859043, 856350, 858168, 854829, 852419, 850796, 849624,
	847464, 847143, 846289, 845316, 842982, 840785, 839335, 839970, 838117, 838078,
	836643, 835077, 833033, 832604, 828769, 829226, 826687, 824401, 825069, 822298,
	820922, 820964, 818480, 815600, 817007, 813629, 813472, 813104, 812421, 809961,
	807877, 806924, 805953, 803791, 802353, 801494, 799563, 799003, 797120, 796383,
	795482, 794408, 792504, 790149, 789955, 787745, 787196, 785160, 784268, 782963,
	781038, 778703, 778223, 777969, 775646, 772246, 773648, 773023, 770609, 768459,
	766887, 766283, 763821, 763553, 760903, 760775, 759791, 759955, 757369, 753371,
	754471, 752693, 753492, 751459, 749601, 746379, 746417, 743342, 744766, 742276,
	741761, 738843, 737344, 738268, 734827, 735500, 733513, 731981, 728586, 729869,
	726061, 726711, 725430, 723322, 723374, 721081, 719872, 716964, 717700, 716082,
	714563, 714945, 712142, 712206, 710146, 706700, 708206, 705528, 704549, 704248,
	700328, 700503, 698399, 697277, 696889, 693391, 694700, 694610, 691680, 690439,
	689861, 688646, 688303, 684990, 684437, 683524, 679687, 681013, 677549, 677923,
	677201, 675648, 673932, 673123, 674877, 671372, 669063, 667581, 666461, 666710,
	665385, 662316, 661423, 660610, 658068, 657780, 656837, 656056, 655612, 653210,
	652063, 651580, 651001, 649545, 646983, 646231, 647108, 643096, 642881, 640376,
	640454, 638906, 637611, 636647, 635423, 634451, 633156, 630165, 630136, 629214,
	627683, 625178, 624538, 623743, 622592, 622685, 620806, 618958, 617891, 617252,
	615662, 615846, 615020, 612619, 611719, 610916, 608970, 608799, 606283, 605863,
	603907, 604909, 602946, 600839, 600286, 598142, 599433, 597529, 595798, 594322,
	593551, 592563, 591053, 590514, 588806, 588504, 586782, 584895, 585669, 584110,
	582874, 580246, 580000, 577802, 578855, 577116, 574129, 572833, 573643, 573630,
	570907, 569204, 569589, 568242, 566924, 566108, 564067, 565336, 562754, 559475,
	559462, 559578, 557214, 558002, 555613, 553484, 554572, 552362, 550968, 549105,
	550102, 547136, 546762, 546748, 544317, 544214, 542566, 542255, 539749, 538286,
	537442, 537183, 537175, 536805, 532887, 535264, 531394, 530739, 530635, 528348,
	526720, 527644, 526760, 525794, 523997, 522150, 521886, 520811, 520077, 518781,
	516674, 515663, 516174, 516449, 513685, 513671, 511489, 511971, 509636, 509157,
	508572, 505984, 505312, 504484, 504607, 504150, 501607, 500813, 498962, 499615,
	498472, 496254, 497098, 494595, 493987, 492589, 491393, 491186, 489012, 488507,
	487976, 487305, 486503, 485486, 484165, 483090, 482220, 481758, 481267, 479862,
	478569, 477329, 477602, 476949, 474792, 474796, 472739, 471592, 471446, 469218,
	469429, 467264, 467063, 466813, 464873, 464989, 464191, 462632, 461954, 460058,
	459680, 459702, 458356, 458058, 457171, 454792, 454117, 453195, 451988, 452226,
	449917, 450268, 449622, 446782, 446797, 446556, 446251, 443584, 444275, 443544,
	442207, 441515, 440289, 440138, 438784, 437517, 436193, 436229, 434923, 433246,
	433359, 433125, 431537, 430200, 429328, 427115, 428092, 427244, 427357, 424783,
	424722, 424675, 422600, 421809, 421450, 419646, 418836, 418516, 418802, 416773,
	417346, 416006, 414682, 413688, 413492, 413074, 410605, 410465, 408585, 408504,
	408092, 407641, 406277, 406195, 404364, 403649, 403020, 401084, 401581, 399708,
	399141, 399055, 398332, 396676, 397158, 395286, 395883, 395367, 392708, 391425,
	390993, 390928, 391467, 389577, 388733, 388208, 386341, 385439, 384725, 385238,
	383731, 382443, 382152, 380325, 381165, 380529, 380097, 379237, 376679, 377640,
	375891, 373631, 373794, 373660, 373196, 372464, 372008, 370484, 368984, 370655,
	368452, 368049, 366636, 365683, 364948, 364428, 364300, 362601, 362600, 361766,
	360828, 360244, 359640, 359803, 358017, 356804, 356084, 355832, 355385, 354688,
	353782, 352365, 352243, 351761, 350995, 349711, 350118, 348278, 347728, 346513,
	346473, 346930, 344478, 345187, 344002, 343143, 342450, 341473, 339795, 339169,
	338762, 337846, 339307, 337890, 337347, 336816, 336770, 334973, 333110, 333852,
	332075, 331790, 330895, 329675, 330721, 329428, 328778, 328072, 327206, 326903,
	325858, 325577, 324825, 323391, 324225, 322363, 322765, 321047, 320145, 319816,
	319163, 318261, 318294, 317450, 316261, 316900, 315191, 314411, 314502, 313113,
	312072, 312013, 312189, 311370, 310372, 309820, 308367, 307302, 307191, 307791,
	305809, 305802, 305164, 304619, 303226, 302931, 302641, 302346, 300407, 300925,
	301433, 299260, 299704, 298460, 297337, 296860, 297091, 296448, 294904, 294411,
	294460, 293278, 293627, 292602, 292683, 292340, 290064, 288983, 290018, 288799,
	287385, 287269, 287172, 286005, 286306, 284566, 284175, 284286, 282849, 281884,
	281772, 282150, 281537, 281272, 280122, 279987, 278607, 278081, 276259, 276552,
	276539, 275668, 275706, 274749, 272984, 273562, 273048, 272407, 272319, 271367,
	270701, 270471, 270468, 269142, 268351, 268585, 267820, 266004, 266519, 265391,
	265022, 264759, 263940, 263752, 263020, 262282, 262534, 261843, 261682, 260435,
	259615, 259713, 258272, 258920, 257286, 257294, 256421, 255489, 255580, 255014,
	254493, 253761, 252598, 252786, 251629, 251994, 250522, 249868, 249541, 249455,
	249085, 248182, 248897, 248049, 247191, 246474, 246326, 244791, 243930, 244885,
	244158, 243335, 242070, 242944, 240930, 241292, 240718, 239986, 240203, 239948,
	237846, 238583, 238623, 238058, 237057, 236416, 236511, 235756, 233787, 234473,
	234588, 233145, 233254, 233402, 232075, 231630, 231362, 231300, 230251, 229815,
	228436, 227990, 227987, 226465, 226606, 226097, 226849, 226087, 225313, 225397,
	224312, 223991, 222269, 223078, 221944, 222931, 221401, 221559, 220574, 219529,
	219232, 219473, 218655, 218098, 218031, 216723, 216784, 216521, 215254, 215000,
	214871, 214823, 213956, 213597, 212709, 212846, 212021, 212235, 211171, 210645,
	210997, 210325, 210221, 209985, 208141, 209247, 207652, 207574, 207354, 207855,
	206616, 205700, 205074, 204202, 204361, 203433, 203872, 202997, 202773, 203187,
	201805, 201239, 200643, 200634, 200239, 198727, 199669, 199810, 198382, 198010,
	198125, 197463, 196706, 195765, 195702, 195731, 195439, 194173, 194357, 193612,
	193305, 194115, 192475, 192346, 192742, 192107, 190905, 191267, 190093, 189810,
	189829, 189891, 188532, 188203, 187573, 187829, 187252, 187386, 186855, 185979,
	185377, 185051, 184753, 183664, 183502, 184082, 183022, 182854, 182118, 182311,
	181863, 180684, 181035, 180144, 179963, 180102, 179294, 179353, 178859, 177908,
	177038, 177698, 177230, 176997, 176139, 175889, 175645, 175393, 174486, 175021,
	174066, 173587, 172938, 173490, 173309, 171063, 171794, 171747, 170999, 170880,
	169782, 170411, 169941, 170008, 168137, 169032, 168211, 167845, 167107, 167591,
	166718, 167038, 166192, 165803, 165528, 164882, 165487, 163984, 164182, 163624,
	162973, 162857, 163275, 162616, 162648, 161912, 161533, 160786, 160995, 160555,
	159744, 159710, 158459, 159678, 158493, 158547, 158556, 157399, 157633, 157603,
	156779, 156286, 156146, 155304, 155298, 154799, 154668, 154611, 153371, 153064,
	153355, 152937, 153129, 152430, 152491, 152258, 149950, 151405, 150654, 149307,
	150286, 149567, 149497, 149874, 149432, 148618, 148580, 147658, 147258, 147558,
	146096, 146783, 144979, 145927, 145801, 144889, 144321, 144698, 143962, 144672,
	143484, 143758, 142898, 141999, 142299, 142153, 141609, 141344, 141653, 140720,
	141078, 140120, 139953, 139209, 139125, 139477, 138622, 138358, 137997, 137896,
	137254, 137658, 137222, 136800, 137144, 136355, 135793, 135902, 135277, 135518,
	134894, 134972, 133716, 133805, 134063, 133101, 133071, 132902, 132956, 132243,
	131293, 131939, 130739, 130236, 131367, 130764, 129931, 129541, 129701, 128903,
	129387, 129016, 128295, 128134, 127756, 127974, 126686, 127784, 127219, 127124,
	126396, 125959, 126114, 124919, 125406, 124764, 124806, 123744, 124322, 124174,
	124049, 123446, 123079, 122615, 122800, 122519, 121732, 121791, 121392, 122099,
	121774, 120385, 121136, 120027, 120656, 119776, 119239, 118757, 119140, 119045,
	117883, 118017, 117892, 117151, 116958, 117882, 116810, 116660, 116657, 116562,
	115507, 115299, 115120, 115344, 114626, 114995, 114529, 114644, 114748, 114242,
	113326, 113021, 112516, 112950, 112523, 112618, 112149, 111690, 111417, 111494,
	110919, 111052, 110544, 110540, 110199, 110266, 109919, 109425, 109468, 108934,
	108702, 108531, 108225, 107488, 108467, 107688, 107055, 107710, 106992, 106887,
	106729, 105543, 105379, 105800, 105207, 104574, 105235, 105095, 105166, 103950,
	104347, 104201, 103853, 103340, 102990, 103087, 102992, 103164, 102294, 101723,
	102977, 101811, 101317, 101265, 100796, 100934, 101000, 100651, 100210, 99969,
	99898, 99834, 99299, 99646, 98554, 98809, 98602, 98332, 98148, 98184,
	97580, 97785, 96802, 96977, 97533, 96772, 97018, 96567, 95745, 95433,
	95916, 95169, 94876, 94740, 94325, 94620, 93533, 94617, 94011, 93634,
	93680, 92667, 93223, 93216, 93170, 92375, 92073, 92145, 91711, 91972,
	91451, 91566, 90934, 91102, 91218, 90760, 89714, 90522, 90349, 90114,
	89669, 89250, 88922, 89083, 88716, 88748, 88567, 88149, 88547, 87694,
	87317, 87860, 87459, 87611, 87155, 86565, 86281, 86788, 86035, 86374,
	85694, 85896, 85265, 84744, 85062, 85082, 84856, 84590, 84443, 84178,
	83576, 83525, 83516, 83140, 83425, 82939, 82661, 82714, 82468, 83075,
	82872, 82516, 81477, 81161, 81345, 81622, 81211, 81111, 80975, 80702,
	80561, 80442, 80074, 80245, 79053, 79878, 78613, 78968, 79351, 79417,
	78792, 78558, 78561, 78051, 77746, 77454, 77747, 77966, 77249, 76753,
	77263, 76744, 76660, 76561, 75886, 76367, 76048, 75925, 75750, 75737,
	74991, 75426, 75296, 74410, 74556, 74279, 74233, 74301, 74750, 74515,
	73283, 73367, 73045, 73103, 72920, 73045, 72746, 72496, 72361, 72845,
	72715, 72030, 71496, 71994, 71935, 71513, 71183, 71009, 70421, 70896,
	70335, 70099, 70213, 69645, 69929, 69547, 69795, 69087, 69503, 69219,
	68554, 69435, 68743, 68888, 68350, 68752, 67903, 67943, 68214, 67659,
	67296, 67099, 66741, 67392, 67247, 67089, 66232, 66361, 66147, 65856,
	65844, 66247, 65380, 65496, 65674, 65217, 65253, 65506, 65369, 64919,
	64971, 64325, 64126, 64452, 63919, 63907, 64787, 63827, 63576, 63567,
	63286, 63070, 63080, 62625, 62658, 62555, 62559, 62661, 62097, 62066,
	62107, 61905, 61869, 61766, 61107, 61358, 61007, 60927, 61310, 61189,
	60657, 60386, 59574, 59980, 59922, 59919, 59596, 59879, 58987, 59093,
	59372, 58540, 59142, 58855, 58990, 58976, 58282, 58426, 58249, 58414,
	58312, 57801, 57716, 57873, 57240, 57086, 57375, 57234, 57113, 56917,
	56910, 56552, 56134, 56256, 56303, 56124, 56323, 55838, 55697, 55180,
	55338, 55386, 55048, 54954, 55321, 55017, 54800, 54228, 54322, 54284,
	54432, 54179, 54242, 54038, 53596, 54110, 53706, 53297, 52750, 53260,
	53659, 52759, 52708, 52519, 53040, 52548, 52699, 52669, 52162, 52163,
	52076, 52221, 51856, 51769, 51600, 51326, 51234, 51409, 50964, 51165,
	50613, 50567, 50791, 50530, 50459, 50106, 50735, 50469, 49878, 49843,
	49711, 49743, 50059, 49639, 49483, 49646, 49197, 49123, 48707, 48672,
	48756, 48319, 48158, 48464, 48069, 48149, 47974, 47661, 48008, 48015,
	47637, 47105, 47212, 47197, 47700, 47654, 47092, 47326, 46990, 47098,
	46875, 46515, 46355, 46180, 46024, 45860, 45949, 46093, 45445, 45319,
	45381, 45204, 45315, 45975, 45683, 45064, 44855, 44364, 44931, 44761,
	44812, 44113, 44381, 44652, 44758, 44100, 44246, 43691, 43808, 43617,
	43605, 43453, 43541, 43363, 43209, 43458, 43410, 42829, 42595, 43171,
	42869, 42877, 42879, 42390, 42473, 42197, 42255, 42189, 42163, 41574,
	41801, 41913, 41762, 41494, 41336, 41012, 41253, 41037, 41164, 41442,
	41044, 40701, 40766, 40573, 40447, 40908, 40664, 40354, 40484, 40231,
	39986, 40210, 39859, 39761, 39628, 39585, 39559, 39409, 39313, 39023,
	38955, 38909, 39013, 38841, 38839, 39052, 38447, 38232, 38172, 38050,
	37791, 37805, 38217, 38015, 38601, 37918, 37779, 37502, 38053, 37716,
	37646, 37649, 37283, 37212, 36756, 37230, 37040, 36492, 36816, 36767,
	36560, 36676, 36521, 36528, 36584, 36320, 36104, 35718, 36151, 36310,
	35812, 35789, 35660, 35549, 35593, 35452, 35250, 35529, 35379, 35306,
	34786, 35084, 34860, 35016, 34556, 34762, 34782, 34567, 33740, 34086,
	34123, 34460, 34468, 34179, 34115, 33978, 34164, 34088, 33570, 33507,
	33879, 33503, 33403, 33251, 33292, 33271, 32961, 32756, 32868, 32710,
	32802, 32608, 32921, 32521, 32396, 32229, 32312, 32136, 32165, 31817,
	31906, 31984, 31894, 31975, 31851, 31950, 31536, 31728, 31537, 31802,
	31317, 31164, 31068, 31312, 31248, 30937, 31059, 31012, 31014, 30654,
	30723, 30704, 30402, 30612, 30435, 30418, 30427, 30229, 30221, 30121,
	30000, 29908, 30010, 30105, 30094, 29707, 29580, 29746, 29403, 29304,
	29810, 29149, 29053, 29233, 29436, 28603, 28810, 28680, 28565, 28630,
	28779, 28495, 28364, 29790, 28211, 28264, 27987, 28088, 27938, 27882,
	28250, 28240, 27951, 28020, 28112, 27833, 27902, 27950, 28099, 27602,
	27863, 27396, 27453, 27032, 26982, 27045, 26957, 27283, 26900, 26763,
	26974, 27476, 26391, 26858, 26668, 26443, 26506, 26359, 26058, 26361,
	26696, 26475, 26208, 26214, 26372, 26079, 26026, 25972, 25817, 25702,
	26061, 25605, 25341, 25419, 25352, 25734, 25442, 25267, 25464, 25688,
	25288, 24997, 24650, 24843, 24692, 24967, 24517, 24918, 24602, 24834,
	25026, 24967, 24548, 24691, 24523, 24556, 24294, 24376, 24383, 23784,
	24009, 23964, 23914, 23828, 24170, 23447, 23538, 23762, 24262, 23528,
	23531, 23497, 23430, 23398, 23191, 23204, 22906, 23371, 23031, 23323,
	23558, 23146, 22853, 23270, 22747, 22693, 22889, 22766, 22321, 22760,
	22681, 22538, 22238, 22258, 22095, 22361, 22736, 22081, 21888, 22012,
	22192, 22078, 21821, 22160, 22017, 21658, 21861, 21680, 21734, 21724,
	21644, 21523, 21531, 21073, 21224, 21177, 21133, 21261, 20804, 20868,
	20938, 21038, 21224, 21110, 21131, 21167, 20702, 20860, 20723, 20771,
	20476, 20580, 20435, 20465, 20646, 20535, 20008, 20287, 20115, 20216,
	20506, 20177, 20404, 19719, 19829, 20006, 19575, 19894, 19324, 19695,
	19453, 19795, 19714, 19721, 19621, 19613, 19751, 19648, 19529, 19578,
	19356, 18040, 19457, 19526, 19291, 19244, 19452, 19025, 19475, 19386,
	18970, 18856, 18653, 18711, 18663, 18526, 18590, 18304, 18407, 18232,
	18270, 18606, 18579, 18207, 18357, 18244, 18153, 18494, 18212, 18081,
	17937, 18234, 16888, 17974, 18029, 17981, 17867, 18114, 18168, 17834,
	17870, 17888, 17571, 17642, 17519, 17243, 17320, 17188, 17492, 17150,
	17171, 17227, 17294, 17402, 17382, 17152, 17141, 16998, 17173, 16805,
	17073, 17106, 15964, 16723, 16606, 16819, 16685, 16826, 16791, 16600,
	16852, 16660, 16503, 16625, 16253, 16527, 16104, 16325, 16464, 16079,
	16104, 16009, 16119, 16017, 15962, 16140, 16030, 15861, 15971, 16141,
	16075, 15870, 15861, 15119, 15626, 15520, 15522, 15624, 15636, 15594,
	15470, 15546, 15403, 15262, 15243, 15179, 15178, 15187, 15030, 14863,
	15202, 14905, 15011, 15389, 15027, 15095, 14956, 15016, 15060, 15034,
	14894, 14872, 14692, 14722, 13792, 14536, 14764, 14746, 14566, 14513,
	14602, 14576, 14511, 14546, 14327, 14042, 14331, 14059, 14074, 14227,
	14172, 14078, 14064, 14204, 14120, 14046, 13828, 13997, 14193, 13819,
	13735, 13716, 13978, 13568, 13249, 13672, 13688, 13631, 13589, 13717,
	13549, 13487, 13743, 13401, 13239, 13347, 13427, 13226, 13057, 13137,
	12888, 13204, 13252, 13080, 13158, 13390, 13201, 13132, 13157, 12959,
	13262, 12896, 12925, 12906, 12841, 12337, 12858, 12804, 12564, 12315,
	12216, 12521, 12651, 12197, 12795, 13097, 12751, 12781, 12498, 12418,
	12634, 12577, 12277, 12257, 11988, 12011, 12081, 12210, 12071, 11816,
	11901, 12004, 11994, 12882, 12943, 11983, 11836, 12103, 11675, 11768,
	11426, 11595, 11582, 11772, 11641, 11758, 11742, 11620, 11738, 12079,
	11767, 11625, 11845, 11849, 11561, 11439, 11321, 11307, 11187, 11233,
	11203, 11157, 11260, 10907, 11257, 10935, 11150, 12221, 11269, 11152,
	11126, 11002, 10891, 10856, 10792, 10921, 10839, 10845, 10853, 10985,
	11030, 10913, 10745, 10808, 10845, 10920, 10831, 10615, 10930, 10355,
	10590, 10508, 10450, 10384, 10188, 10421, 10224, 10524, 10263, 10362,
	11324, 10407, 10345, 10234, 10181, 9834, 10018, 10012, 10009, 10024,
	10076, 10109, 10267, 10173, 10201, 10394, 10115, 10162, 10073, 10035,
	9922, 9889, 9690, 9844, 9715, 9721, 9634, 9617, 9833, 9420,
	9785, 9734, 9514, 9752, 10544, 9541, 9715, 9521, 9440, 9258,
	9321, 9137, 9296, 9233, 9585, 9447, 9251, 9381, 9491, 9306,
	9361, 9317, 9192, 9357, 9203, 9104, 9257, 9150, 9236, 9104,
	9071, 9021, 8847, 8964, 8989, 8895, 8834, 9822, 8992, 8843,
	8668, 8815, 8759, 8746, 8637, 8597, 8592, 8705, 8856, 8708,
	8685, 8818, 8840, 8836, 8696, 8712, 8677, 8579, 8560, 8276,
	8526, 8454, 8335, 8435, 9263, 8419, 8226, 8149, 8156, 8092,
	7152, 8473, 8593, 8526, 8596, 8438, 8471, 8596, 8330, 8111,
	8016, 7978, 7710, 7638, 7791, 7607, 7392, 7682, 7800, 8001,
	7959, 8068, 7906, 8232, 8284, 8005, 8145, 8073, 8085, 7824,
	7935, 7626, 7548, 7585, 7518, 7517, 6704, 7761, 7717, 7796,
	7909, 7612, 7644, 7864, 7522, 7567, 7441, 7492, 7281, 7197,
	7305, 7259, 7199, 7253, 6960, 7149, 7271, 7249, 7093, 7561,
	7368, 7492, 7549, 7420, 7277, 7254, 7211, 7125, 7066, 7056,
	7225, 7045, 6530, 7313, 7180, 7354, 7309, 7356, 7093, 7070,
	6748, 6827, 6805, 6817, 6514, 6634, 6755, 6874, 6774, 6904,
	6742, 6765, 7026, 6816, 6985, 6963, 6885, 6766, 6892, 6633,
	6570, 6501, 6404, 6377, 6367, 6481, 6200, 6358, 5992, 6632,
	6715, 6826, 6901, 6848, 6626, 6588, 6601, 6593, 6236, 6136,
	5959, 6094, 5986, 5967, 5963, 5995, 6187, 6144, 6283, 6521,
	6512, 6684, 6574, 6428, 6393, 6329, 6306, 6025, 6133, 5971,
	6098, 5780, 5718, 5676, 5676, 5992, 6129, 6137, 6084, 6125,
	6099, 6051, 5899, 6022, 5897, 5788, 5673, 5726, 5777, 5923,
	5751, 5834, 5587, 5845, 5762, 5987, 6089, 5737, 5797, 5798,
	5786, 5533, 5376, 5387, 5328, 5312, 5358, 5374, 5395, 5360,
	5518, 5669, 5696, 5795, 6005, 5811, 5952, 5655, 5531, 5364,
	5270, 5189, 5135, 5061, 5014, 5080, 5106, 5248, 4890, 5280,
	5352, 5329, 5339, 5380, 5555, 5565, 5539, 5484, 5343, 5290,
	5358, 5120, 5047, 4966, 4886, 4912, 5081, 5156, 5066, 4899,
	4945, 4862, 4936, 4986, 4931, 4751, 4834, 4858, 5020, 5120,
	5074, 5197, 5048, 5091, 5244, 5193, 5005, 4116, 4408, 4603,
	4771, 4916, 6458, 5773, 4881, 4873, 4490, 4537, 4400, 4344,
	4474, 4458, 4550, 4657, 4753, 4863, 4635, 4622, 4688, 4811,
	4817, 4932, 4930, 4852, 4847, 4808, 4601, 4441, 4380, 4375,
	4411, 4517, 4417, 4562, 4268, 4344, 4555, 4589, 4620, 4716,
	4663, 4982, 6051, 4427, 4314, 4066, 4008, 3973, 3849, 3810,
	3822, 3727, 3766, 3877, 3753, 4250, 4658, 4772, 5118, 5374,
	5399, 5231, 4951, 4577, 3924, 4200, 4160, 4088, 4500, 4210,
	3933, 3797, 3965, 3929, 3818, 3736, 3829, 3862, 3988, 4191,
	4149, 5810, 4129, 3985, 3831, 3561, 3785, 3779, 3719, 3722,
	3841, 3822, 4000, 3933, 4056, 4048, 4036, 4135, 4234, 4222,
	4210, 4196, 4019, 3909, 3882, 3573, 3476, 3363, 3375, 3443,
	3400, 3480, 3591, 3724, 3866, 4353, 4017, 3891, 4027, 4185,
	5212, 3899, 3584, 3394, 3280, 3258, 3151, 3186, 3111, 3211,
	3248, 3305, 3361, 3567, 3760, 3857, 4206, 4326, 4423, 4384,
	4023, 3831, 3665, 3419, 3250, 3212, 3028, 3109, 2976, 2984,
	2953, 3058, 3082, 3158, 3285, 3465, 3724, 3835, 4091, 5218,
	4102, 3911, 3345, 2985, 2762, 2772, 2758, 2843, 2724, 2856,
	2798, 2981, 3019, 3213, 3401, 3592, 3822, 3837, 3851, 3620,
	3601, 3698, 3572, 3046, 2917, 2900, 2839, 2852, 2815, 2864,
	2888, 2891, 3029, 3126, 3332, 3527, 3499, 3649, 4322, 3341,
	3054, 2845, 2814, 2779, 2704, 3069, 3069, 3114, 3172, 2847,
	2797, 2626, 2882, 3394, 3440, 3563, 3496, 3581, 3317, 3154,
	2954, 2783, 2693, 2674, 2532, 2573, 2514, 2595, 2598, 2680,
	2643, 2824, 2937, 3132, 3395, 3525, 3415, 2568, 1521, 1813,
	2035, 2144, 2144, 2274, 2470, 3042, 3917, 11070, 3706, 2854,
	2407, 2247, 2145, 2002, 2043, 1997, 1999, 1893, 1975, 1828,
	1835, 1644, 1947, 2034, 2181, 2354, 2549, 13865, 3250, 2369,
	2173, 1972, 1885, 1855, 1854, 1734, 1767, 1775, 1731, 2348,
	2683, 2549, 2556, 2695, 2643, 2645, 2583, 2476, 2496, 2397,
	3797, 2547, 2603, 2607, 2480, 2554, 2441, 2620, 2557, 2556,
	2682, 2691, 2622, 2657, 2492, 2432, 2563, 2463, 2433, 2410,
	2048, 2384, 2395, 2457, 2421, 2511, 2438, 2462, 2462, 2456,
	2466, 2558, 2405, 2385, 2450, 2410, 2350, 2810, 2284, 2367,
	2271, 2288, 2336, 2357, 2424, 2340, 2343, 2299, 2219, 2296,
	2428, 2238, 2277, 2356, 2183, 2220, 2211, 2176, 2200, 2300,
	2254, 2156, 2317, 2231, 2234, 2202, 2374, 2243, 2253, 2330,
	2206, 2392, 2348, 2033, 2104, 1906, 2165, 2162, 2090, 2120,
	1991, 2075, 2204, 2065, 2140, 2053, 2142, 2124, 2132, 2126,
	2162, 2080, 2079, 2060, 2056, 2018, 2133, 2036, 2033, 2077,
	2124, 1991, 2030, 2065, 2052, 1956, 1944, 2028, 1987, 2050,
	1879, 1967, 1953, 1926, 1367, 1832, 1944, 1907, 1922, 1911,
	1932, 1833, 1824, 1910, 1945, 1919, 2022, 1828, 1859, 1804,
	1899, 1798, 1811, 1843, 1877, 1814, 1909, 1875, 1893, 1711,
	1825, 1849, 1873, 1791, 1769, 1814, 1937, 1932, 1909, 2017,
	1975, 1908, 1987, 1982, 1139, 2005, 2038, 1872, 1697, 1674,
	1731, 1824, 1744, 1786, 1700, 1738, 1721, 2140, 2690, 2669,
	2724, 2162, 1612, 1658, 1681, 1691, 1635, 1647, 1774, 1779,
	1729, 1646, 1575, 1416, 1632, 1689, 1620, 1609, 1903, 1863,
	1675, 1491, 1517, 1490, 1309, 1594, 1487, 1554, 1595, 1603,
	1609, 1542, 1529, 1526, 1588, 1683, 1889, 1596, 1658, 2329,
	2364, 2443, 2343, 1777, 1457, 1456, 1515, 1481, 1427, 1401,
	1512, 1468, 1478, 1402, 1536, 1488, 1481, 1464, 1375, 1433,
	1445, 1469, 1372, 1445, 1447, 1428, 1406, 1430, 1340, 1447,
	1401, 1397, 1375, 1434, 1414, 1394, 1391, 1365, 1411, 1263,
	1358, 1366, 1396, 1300, 1300, 631, 700, 1349, 1250, 1347,
	1339, 1358, 1290, 1323, 1307, 1301, 1359, 1333, 1274, 1352,
	1273, 1294, 1301, 1258, 1278, 1362, 1322, 1430, 1381, 1385,
	1319, 1241, 1289, 1278, 1289, 1272, 1291, 1222, 1237, 1312,
	1221, 1137, 1284, 1236, 1233, 1266, 1278, 1214, 1244, 1264,
	1179, 1307, 1323, 661, 1176, 1270, 1320, 1296, 1264, 1281,
	1188, 1166, 1212, 1112, 1240, 1207, 1166, 1119, 1174, 1163,
	1241, 1364, 1375, 1416, 1349, 1431, 1309, 1353, 1371, 1315,
	1359, 1308, 1377, 1349, 1382, 1310, 1368, 1324, 1317, 1363,
	1193, 1071, 1078, 1093, 1135, 1168, 1141, 1133, 1061, 1221,
	1154, 1130, 1121, 1141, 1136, 1126, 1096, 1073, 1053, 1002,
	1141, 1084, 1128, 1087, 1110, 1112, 1051, 1032, 1078, 1083,
	1096, 1070, 1061, 1049, 1017, 1039, 1050, 1027, 955, 1067,
	1091, 1079, 1079, 1002, 1027, 985, 1022, 1056, 1030, 1040,
	990, 1013, 1030, 1145, 1319, 1034, 1049, 867, 382, 880,
	952, 941, 942, 1000, 955, 980, 965, 969, 973, 889,
	905, 937, 945, 925, 935, 903, 980, 944, 926, 956,
	803, 922, 968, 930, 963, 926, 887, 928, 1008, 901,
	900, 899, 961, 938, 964, 948, 993, 988, 950, 923,
	862, 886, 895, 908, 915, 846, 829, 860, 1199, 908,
	888, 852, 974, 942, 1004, 953, 990, 868, 926, 921,
	934, 913, 914, 928, 924, 897, 913, 931, 911, 947,
	915, 945, 959, 867, 886, 889, 870, 940, 818, 935,
	836, 869, 813, 839, 852, 826, 848, 804, 905, 800,
	866, 887, 936, 982, 1061, 1453, 1257, 957, 857, 758,
	730, 838, 858, 867, 874, 836, 814, 860, 846, 875,
	841, 856, 869, 832, 772, 762, 769, 788, 772, 722,
	760, 766, 764, 805, 796, 755, 653, 730, 808, 741,
	735, 739, 715, 785, 752, 760, 749, 696, 783, 1133,
	1162, 991, 726, 692, 806, 726, 715, 777, 720, 726,
	725, 747, 742, 712, 752, 697, 737, 740, 740, 751,
	695, 722, 631, 697, 722, 732, 708, 682, 658, 677,
	732, 683, 668, 672, 712, 611, 666, 604, 664, 703,
	628, 906, 967, 956, 764, 701, 706, 667, 710, 658,
	716, 663, 678, 699, 632, 664, 667, 605, 619, 664,
	641, 686, 649, 645, 646, 617, 658, 653, 684, 639,
	653, 604, 645, 636, 684, 663, 673, 603, 614, 673,
	572, 557, 617, 946, 926, 697, 655, 629, 595, 619,
	606, 637, 623, 664, 700, 734, 648, 646, 610, 643,
	642, 644, 581, 613, 668, 671, 745, 739, 712, 709,
	652, 600, 579, 571, 560, 636, 580, 562, 577, 582,
	611, 554, 579, 595, 596, 810, 801, 545, 617, 554,
	555, 546, 565, 545, 548, 560, 520, 561, 551, 566,
	550, 538, 572, 537, 570, 554, 568, 543, 496, 473,
	556, 545, 511, 564, 576, 600, 563, 609, 516, 354,
	230, 225, 181, 191, 190, 242, 286, 258, 230, 283,
	305, 458, 387, 375, 371, 406, 425, 408, 407, 410,
	435, 456, 782, 790, 783, 766, 815, 724, 722, 656,
	645, 739, 727, 756, 818, 758, 788, 711, 718, 761,
	761, 762, 749, 784, 812, 798, 832, 671, 665, 648,
	599, 656, 786, 839, 802, 818, 845, 828, 794, 534,
	475, 434, 408, 405, 402, 401, 381, 380, 395, 377,
	401, 379, 370, 376, 407, 394, 403, 391, 406, 413,
	429, 389, 426, 394, 372, 373, 381, 398, 411, 443,
	433, 409, 401, 336, 335, 268, 288, 290, 269, 298,
	288, 260, 340, 321, 318, 320, 337, 365, 350, 349,
	336, 258, 149, 140, 219, 348, 375, 344, 393, 340,
	346, 370, 362, 408, 388, 369, 349, 350, 354, 357,
	351, 331, 352, 331, 318, 375, 340, 343, 337, 329,
	336, 318, 314, 341, 374, 338, 313, 335, 366, 332,
	328, 332, 399, 332, 369, 326, 349, 292, 318, 360,
	346, 322, 319, 343, 331, 324, 262, 276, 253, 219,
	220, 244, 300, 224, 320, 325, 345, 296, 300, 299,
	317, 339, 301, 323, 352, 283, 325, 295, 272, 290,
	303, 299, 302, 243, 285, 275, 257, 261, 270, 248,
	271, 270, 275, 287, 281, 343, 294, 278, 276, 277,
	258, 274, 295, 296, 276, 300, 280, 292, 283, 271,
	291, 287, 323, 273, 288, 287, 261, 293, 362, 438,
	396, 318, 319, 314, 324, 318, 309, 344, 287, 261,
	239, 248, 317, 299, 321, 347, 305, 304, 304, 340,
	334, 317, 315, 322, 339, 308, 289, 328, 299, 323,
	283, 309, 256, 257, 271, 305, 288, 285, 286, 285,
	248, 280, 330, 265, 294, 295, 289, 282, 291, 397,
	460, 443, 468, 351, 306, 275, 284, 334, 310, 314,
	292, 320, 321, 316, 293, 293, 336, 316, 297, 336,
	294, 261, 252, 246, 254, 259, 224, 257, 246, 237,
	242, 251, 210, 246, 255, 253, 249, 231, 219, 126,
	110, 103, 108, 115, 117, 85, 87, 86, 98, 104,
	127, 139, 121, 115, 101, 71, 73, 92, 78, 157,
	217, 236, 234, 226, 237, 231, 204, 224, 227, 202,
	174, 174, 165, 173, 178, 171, 175, 178, 161, 148,
	190, 196, 189, 201, 210, 248, 226, 184, 165, 198,
	169, 191, 174, 189, 193, 164, 192, 217, 199, 182,
	207, 220, 197, 218, 168, 207, 184, 190, 182, 205,
	199, 194, 181, 165, 178, 203, 189, 194, 163, 209,
	202, 179, 194, 161, 180, 185, 180, 158, 169, 169,
	154, 163, 168, 183, 176, 183, 185, 188, 177, 169,
	187, 171, 174, 154, 162, 160, 266, 322, 295, 291,
	283, 302, 316, 317, 227, 182, 139, 179, 158, 148,
	162, 198, 203, 218, 180, 201, 204, 227, 202, 191,
	197, 206, 213, 228, 194, 195, 186, 219, 195, 207,
	201, 219, 199, 184, 216, 215, 205, 215, 192, 180,
	184, 187, 191, 162, 159, 184, 250, 288, 263, 272,
	290, 287, 261, 280, 273, 293, 301, 240, 274, 172,
	175, 187, 174, 177, 192, 183, 159, 146, 199, 190,
	187, 162, 151, 170, 149, 129, 153, 198, 159, 153,
	154, 151, 133, 149, 154, 190, 189, 192, 167, 174,
	168, 160, 187, 192, 190, 180, 204, 217, 161, 186,
	209, 166, 138, 135, 136, 138, 151, 140, 140, 143,
	126, 134, 121, 154, 137, 156, 180, 193, 195, 211,
	184, 233, 159, 117, 107, 127, 102, 132, 131, 127,
	134, 145, 136, 99, 113, 118, 112, 127, 109, 109,
	103, 119, 137, 109, 123, 113, 137, 145, 135, 130,
	131, 115, 86, 100, 102, 94, 89, 89, 99, 108,
	106, 93, 104, 115, 109, 117, 114, 106, 120, 111,
	109, 100, 122, 119, 105, 106, 129, 190, 207, 179,
	181, 168, 216, 175, 191, 176, 199, 199, 192, 199,
	185, 170, 127, 114, 121, 129, 108, 102, 107, 119,
	113, 130, 111, 107, 128, 93, 104, 126, 131, 93,
	107, 126, 126, 99, 105, 122, 128, 116, 110, 130,
	108, 102, 132, 200, 177, 167, 166, 199, 193, 187,
	195, 202, 189, 210, 227, 174, 223, 209, 212, 231,
	222, 194, 120, 94, 102, 100, 102, 104, 106, 121,
	104, 102, 106, 102, 120, 133, 123, 128, 107, 108,
	109, 108, 117, 110, 98, 108, 129, 123, 104, 69,
	90, 83, 80, 61, 54, 62, 66, 38, 57, 54,
	52, 62, 54, 51, 62, 50, 73, 58, 51, 56,
	55, 63, 48, 48, 57, 56, 51, 54, 60, 34,
	51, 46, 45, 43, 41, 51, 26, 42, 43, 36,
	33, 43, 27, 40, 30, 27, 50, 42, 30, 49,
	35, 40, 40, 80, 179, 226, 217, 203, 211, 202,
	216, 226, 223, 222, 223, 223, 239, 244, 220, 226,
	238, 235, 274, 239, 253, 230, 210, 252, 266, 242,
	274, 207, 181, 192, 185, 148, 68, 75, 70, 77,
	87, 171, 173, 169, 179, 200, 208, 182, 230, 212,
	236, 145, 135, 139, 141, 155, 96, 116, 99, 98,
	60, 58, 67, 65, 62, 81, 56, 62, 69, 70,
	72, 72, 38, 46, 66, 61, 68, 61, 58, 55,
	53, 56, 61, 53, 64, 50, 60, 73, 67, 61,
	66, 52, 49, 65, 67, 51, 49, 59, 70, 66,
	56, 66, 57, 50, 63, 58, 63, 72, 64, 60,
	66, 72, 60, 83, 58, 132, 109, 112, 125, 116,
	104, 115, 109, 128, 105, 115, 117, 122, 104, 83,
	63, 59, 56, 59, 74, 62, 63, 60, 59, 52,
	60, 55, 50, 57, 55, 55, 46, 55, 54, 59,
	50, 63, 62, 58, 60, 59, 72, 50, 55, 49,
	69, 55, 51, 48, 51, 66, 93, 98, 79, 114,
	84, 87, 102, 87, 71, 99, 113, 98, 65, 63,
	60, 73, 55, 66, 33, 31, 26, 37, 33, 27,
	32, 45, 29, 26, 27, 33, 33, 31, 34, 27,
	40, 25, 28, 34, 32, 47, 30, 26, 34, 29,
	29, 33, 23, 37, 36, 23, 22, 27, 19, 16,
	23, 19, 14, 20, 20, 34, 20, 14, 20, 15,
	21, 12, 15, 14, 12, 19, 10, 10, 15, 18,
	17, 18, 18, 17, 6, 17, 15, 10, 16, 5,
	12, 9, 17, 12, 10, 15, 16, 38, 62, 47,
	44, 36, 18, 26, 16, 20, 19, 23, 23, 16,
	15, 21, 24, 24, 15, 12, 19, 26, 23, 34,
	24, 18, 15, 28, 20, 21, 11, 17, 18, 16,
	20, 24, 17, 15, 13, 21, 7, 12, 20, 22,
	34, 39, 45, 45, 39, 38, 40, 27, 33, 30,
	37, 29, 41, 22, 29, 48, 26, 21, 40, 48,
	38, 44, 44, 43, 46, 33, 34, 52, 49, 42,
	48, 51, 42, 44, 49, 36, 47, 35, 44, 39,
	32, 40, 53, 39, 45, 24, 55, 29, 44, 41,
	43, 54, 42, 40, 42, 55, 54, 56, 39, 33,
	46, 44, 49, 37, 29, 36, 37, 32, 34, 24,
	43, 39, 45, 35, 46, 48, 57, 42, 54, 51,
	49, 40, 41, 34, 50, 44, 30, 42, 40, 44,
	46, 58, 51, 45, 40, 50, 49, 46, 42, 40,
	30, 56, 48, 40, 44, 38, 52, 42, 34, 39,
	40, 43, 40, 30, 46, 43, 48, 45, 44, 45,
	51, 40, 32, 39, 38, 40, 49, 28, 40, 47,
	34, 41, 33, 46, 45, 45, 40, 45, 38, 56,
	42, 55, 27, 26, 29, 29, 19, 21, 29, 15,
	36, 20, 32, 26, 30, 25, 30, 29, 24, 18,
	25, 20, 31, 14, 23, 24, 26, 24, 24, 14,
	26, 35, 20, 35, 32, 22, 20, 29, 25, 29,
	31, 20, 24, 38, 32, 38, 45, 42, 44, 36,
	43, 31, 34, 29, 25, 25, 37, 24, 24, 27,
	26, 19, 21, 22, 32, 28, 38, 19, 16, 24,
	26, 32, 19, 29, 23, 26, 14, 22, 28, 24,
	21, 21, 22, 25, 19, 24, 35, 20, 31, 28,
	18, 31, 28, 25, 30, 26, 28, 31, 32, 24,
	17, 24, 22, 29, 30, 35, 29, 23, 30, 27,
	27, 17, 31, 23, 31, 27, 14, 29, 21, 37,
	25, 37, 28, 28, 30, 34, 29, 32, 33, 27,
	28, 38, 34, 36, 40, 28, 30, 27, 24, 28,
	21, 37, 27, 34, 25, 26, 34, 33, 32, 30,
	23, 35, 35, 28, 26, 19, 14, 22, 15, 22,
	13, 17, 16, 23, 28, 32, 22, 37, 36, 41,
	38, 31, 27, 24, 43, 36, 20, 44, 29, 31,
	35, 36, 24, 38, 25, 30, 32, 28, 36, 33,
	28, 31, 23, 22, 16, 24, 24, 21, 30, 32,
	20, 14, 35, 25, 28, 21, 23, 28, 39, 20,
	36, 38, 30, 16, 35, 42, 43, 48, 47, 39,
	49, 48, 47, 22, 24, 29, 23, 25, 24, 19,
	24, 17, 13, 21, 21, 18, 19, 18, 13, 33,
	23, 17, 24, 22, 19, 22, 24, 27, 17, 18,
	19, 18, 20, 19, 33, 21, 18, 26, 22, 33,
	29, 16, 24, 14, 28, 35, 26, 23, 33, 16,
	20, 12, 20, 21, 18, 22, 28, 15, 31, 18,
	16, 17, 17, 18, 14, 20, 23, 20, 21, 11,
	20, 26, 29, 17, 13, 13, 19, 20, 11, 17,
	26, 20, 16, 16, 20, 15, 14, 20, 12, 5,
	6, 4, 12, 15, 9, 9, 3, 11, 7, 3, 10, 5, 8, 9, 6, 4, 10, 8, 5, 10,
	7, 9, 6, 15, 7, 16, 7, 15, 12, 13, 17, 10, 12, 19, 7, 14, 12, 14, 8, 11,
	18, 4, 12, 15, 9, 9, 14, 14, 15, 14, 13, 14, 6, 8, 6, 19, 13, 9, 9, 12,
	15, 7, 9, 10, 9, 9, 15, 15, 11, 11, 11, 7, 12, 9, 10, 15, 6, 15, 14, 11,
	16, 11, 11, 11, 10, 14, 9, 17, 10, 13,
	12, 10, 12, 15, 11, 15, 23, 11, 20, 21,
	17, 16, 10, 12, 15, 12, 22, 12, 17, 18,
	15, 11, 12, 15, 13, 12, 9, 15, 22, 21,
	18, 21, 18, 17, 15, 22, 20, 20, 24, 13,
	17, 15, 17, 24, 13, 16, 21, 16, 15, 18,
	14, 14, 15, 20, 22, 10, 12, 20, 20, 18,
	9, 16, 17, 17, 24, 26, 15, 16, 20, 15,
	17, 15, 10, 12, 9, 19, 14, 15, 14, 12,
	10, 14, 25, 18, 13, 8, 18, 15, 15, 16,
	9, 9, 16, 13, 19, 11, 16, 11, 11, 14,
	11, 10, 10, 17, 14, 20, 16, 11, 13, 12,
	16, 22, 23, 15, 16, 12, 15, 12, 18, 25,
	24, 18, 19, 15, 11, 9, 14, 13, 12, 14,
	13, 11, 11, 16, 8, 10, 17, 8, 12, 11,
	13, 13, 13, 8, 17, 13, 9, 11, 14, 16,
	9, 12, 14, 16, 14, 11, 8, 7, 12, 6, 9, 9, 10, 10, 11, 7, 8, 12, 6, 4,
	11, 12, 7, 6, 10, 12, 7, 5, 11, 8, 7, 15, 17, 8, 15, 11, 10, 10, 11, 12,
	11, 11, 11, 11, 12, 8, 6, 17, 9, 18,
	15, 9, 12, 15, 10, 15, 9, 8, 10, 15,
	23, 20, 18, 10, 24, 19, 27, 14, 18, 19,
	10, 17, 19, 13, 17, 18, 18, 17, 20, 22,
	17, 16, 22, 13, 5, 15, 19, 19, 24, 16,
	24, 15, 13, 21, 15, 16, 17, 22, 20, 22,
	25, 18, 23, 14, 24, 23, 14, 19, 19, 16,
	16, 10, 19, 21, 15, 20, 18, 15, 12, 17,
	13, 9, 16, 19, 21, 15, 21, 11, 15, 17,
	17, 14, 18, 15, 20, 17, 12, 18, 19, 10,
	14, 16, 15, 17, 17, 15, 15, 21, 21, 10,
	15, 17, 14, 17, 18, 11, 13, 13, 14, 18,
	21, 15, 14, 20, 17, 11, 15, 26, 21, 18,
	11, 16, 19, 22, 26, 14, 17, 15, 11, 17,
	10, 7, 15, 11, 14, 8, 15, 7, 14, 13,
	12, 10, 9, 8, 12, 10, 10, 7, 13, 6, 7, 10, 6, 10, 11, 9, 5, 5, 9, 8,
	5, 4, 6, 7, 5, 7, 7, 4, 3, 4, 7, 9, 6, 5, 10, 2, 3, 10, 5, 11,
	3, 6, 8, 12, 7, 5, 6, 7, 9, 6, 4, 3, 7, 8, 7, 8, 12, 4, 11, 3,
	9, 9, 5, 6, 8, 3, 5, 5, 4, 9, 9, 4, 10, 3, 9, 4, 6, 7, 6, 5,
	7, 9, 5, 5, 6, 4, 5, 3, 7, 5, 6, 8, 9, 7, 9, 12, 5, 1, 10, 2,
	6, 5, 11, 8, 2, 8, 4, 9, 5, 7, 7, 9, 6, 10, 11, 7, 5, 6, 5, 3,
	3, 11, 5, 4, 6, 10, 2, 6, 6, 9, 4, 3, 5, 5, 5, 4, 5, 3, 7, 12,
	4, 8, 6, 4, 3, 7, 9, 7, 9, 10, 8, 8, 6, 3, 7, 8, 2, 5, 7, 10,
	7, 7, 6, 6, 6, 4, 10, 8, 8, 5, 11, 7, 6, 4, 3, 10, 9, 3, 2, 3,
	5, 7, 3, 4, 7, 5, 4, 2, 7, 7, 4, 6, 3, 6, 7, 4, 8, 9, 4, 10,
	6, 5, 5, 6, 7, 3, 5, 6, 6, 3, 12, 8, 2, 3, 6, 2, 8, 8, 3, 1,
	4, 2, 6, 9, 8, 5, 5, 7, 5, 11, 5, 10, 0, 5, 10, 8, 7, 6, 4, 3, 5, 7, 7,
	8, 10, 6, 8, 7, 2, 4, 6, 2, 5, 8, 5, 7, 5, 0, 5, 1, 5, 4, 4, 1, 1, 4, 1,
	5, 7, 2, 3, 3, 2, 1, 2, 3, 5, 4, 2, 7, 1, 6, 1, 1, 4, 1, 3, 3, 3, 2, 1,
	2, 3, 1, 2, 10, 2, 6, 3, 1, 2, 1, 2, 3, 1, 6, 1, 6, 3, 3, 3, 3, 2, 4, 3,
	3, 2, 3, 4, 3, 4, 3, 6, 7, 3, 6, 1, 1, 4, 3, 1, 2, 5, 2, 4, 3, 4, 3, 4,
	2, 5, 0, 2, 1, 2, 3, 9, 2, 5, 4, 6, 7, 2, 3, 3, 4, 2, 5, 3, 4, 4, 1, 3,
	5, 3, 2, 3, 5, 2, 2, 7, 3, 0, 1, 1, 0, 1, 1, 2, 4, 1, 4, 0, 1, 3, 1, 3,
	0, 2, 3, 3, 3, 4, 1, 2, 2, 3, 3, 0, 4, 3, 1, 4, 2, 1, 3, 4, 2, 0, 4, 2,
	2, 2, 1, 2, 1, 2, 0, 1
};

char Na_6385_14411[] = { 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 0, 
	0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 2, 1, 0, 0, 1, 0, 2, 4, 0, 1, 1, 3, 1, 7, 1, 3, 6, 2, 0, 
	1, 4, 1, 1, 0, 0, 1, 3, 1, 0, 1, 0, 1, 0, 1, 2, 0, 0, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 
	1, 1, 3, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 
	0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 2, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 3, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1, 2, 1, 3, 0, 
	1, 2, 1, 0, 2, 3, 0, 2, 0, 0, 0, 0, 0, 3, 2, 2, 2, 1, 1, 0, 
	3, 2, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 0, 3, 2, 0, 
	1, 1, 0, 1, 3, 0, 0, 2, 3, 0, 2, 2, 2, 2, 0, 1, 4, 6, 2, 0, 
	4, 0, 0, 1, 3, 3, 0, 1, 2, 0, 3, 2, 5, 0, 0, 1, 1, 2, 0, 0, 
	2, 1, 1, 3, 1, 2, 2, 2, 1, 0, 3, 3, 0, 2, 3, 4, 3, 0, 2, 0, 
	2, 5, 1, 2, 2, 5, 3, 1, 2, 0, 3, 1, 2, 1, 4, 4, 4, 2, 0, 0, 
	4, 3, 2, 1, 3, 3, 2, 1, 0, 0, 1, 3, 0, 3, 3, 1, 1, 2, 1, 0, 
	3, 3, 0, 3, 3, 2, 3, 4, 5, 0, 0, 1, 1, 2, 0, 3, 1, 4, 4, 0, 
	1, 2, 1, 1, 0, 1, 2, 2, 2, 0, 3, 0, 3, 0, 2, 1, 3, 5, 2, 0, 
	2, 3, 1, 1, 3, 0, 1, 4, 5, 0, 0, 2, 1, 3, 1, 0, 3, 1, 3, 0, 
	1, 2, 1, 0, 2, 3, 1, 1, 2, 0, 4, 0, 0, 1, 0, 3, 2, 2, 0, 0, 
	0, 0, 3, 2, 1, 1, 1, 4, 2, 0, 0, 2, 1, 0, 0, 1, 2, 1, 0, 0, 
	1, 2, 0, 1, 1, 0, 1, 2, 2, 0, 2, 2, 1, 0, 2, 2, 0, 0, 0, 0, 
	1, 2, 2, 2, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 2, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 2, 0, 
	1, 0, 0, 3, 1, 5, 0, 0, 0, 0, 0, 1, 2, 2, 1, 2, 0, 2, 1, 0, 
	0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 
	0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 1, 1, 1, 0, 
	2, 0, 2, 1, 1, 0, 0, 1, 2, 0, 4, 1, 2, 0, 1, 0, 1, 2, 1, 0, 
	2, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 
	0, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
	0, 2, 2, 0, 2, 0, 1, 0, 2, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 
	1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 2, 0, 0, 
	0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 
	1, 1, 0, 1, 0, 3, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 
	0, 0, 2, 0, 0, 0, 0, 1, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 
	1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 2, 1, 0, 0, 
	1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 
	1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
	1, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 1, 2, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 
	2, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	1, 2, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 1, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 
	1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 0, 1, 0, 1, 2, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 2, 1, 0, 3, 2, 1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 3, 0, 0, 0, 0, 
	2, 0, 1, 1, 0, 1, 3, 0, 1, 0, 0, 1, 2, 1, 0, 0, 2, 1, 1, 0, 
	1, 0, 2, 5, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 
	1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 2, 0, 0, 2, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 
	1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 1, 0, 0, 
	1, 2, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 2, 0, 1, 1, 0, 
	2, 1, 0, 1, 1, 0, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 
	0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 
	1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 
	1, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 
	1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 
	0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
	2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
	0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
};

typedef struct _xSNPClumping
{
	cQtestAnalysis	*Cp_anaQtest;
	vInt			&Xa_snp;
} xSNPClumping;

cQtestAnalysis::cQtestAnalysis(cIO *Cp_IO, cPPPAnalysisV2 *Cp_inpAnaPPP,
	cSetManagerAnalysis *Cp_inpGsmAna, cFemmaAnalysis *Cp_inpAnaFemma/*=NULL*/)
	: cAnalysis(Cp_IO)
{
	wsUint i, I, j;

	/* Currently Q-test supports only univariate analysis */
	if (Cp_IO->sizePheno() != 1)
		halt("Qtest is only applicable to univariate analysis");
	/* Currently Q-test supports only continuous phenotype */
	if (!Cp_IO->isContinuous())
		halt("Qtest is only applicable to continuous phenotype");
	if (Cp_inpGsmAna == NULL)
		halt("No gene set given, Qtest requires gene-set definition");
	/* Check STT option */
	if (IS_ASSIGNED(qteststt))
		R_stt = OPT_REAL(qteststt);
	else
		R_stt = WISARD_QTEST_DEFAULT_STT;
	/* Customized weight cannot be used with --qtestclump */
	if (IS_ASSIGNED(weight) && OPT_ENABLED(qtestclump))
		halt("--weight cannot be used with --qtestclump");

	/* Allocate default value if desired */
	if (!IS_ASSIGNED(qtestrange)) {
		OPTION().assign("qtestrange", OPTION().getDefVal("qtestrange"), 1);
		FORCE_OPT_RANGE(qtestrange);
	}

	/* Set default variable */
	Cp_anaGsm	= Cp_inpGsmAna;
	Cp_anaPPP	= Cp_inpAnaPPP;
	Cp_anaFemma	= Cp_inpAnaFemma;

	/* Data preparation */
	wsRealCst	*Ra_phe			= Cp_IO->getPheno();
	wsReal	**Ra_cov		= Cp_IO->getCovariates();
	wsUint	N_cov			= Cp_IO->sizeCovar();
	wsReal	**Ra_anaTcov	= NULL;
	N_oriSamp				= Cp_IO->sizeSample();

	/* Finding missing phenotype samples */
	N_anaSamp = 0;
	for (N_anaSamp=i=0 ; i<N_oriSamp ; i++) {
		if (isMissingReal(Ra_phe[i])) continue;
		for (j=0 ; j<N_cov ; j++)
			if (isMissingReal(Ra_cov[j][i])) break;
		if (j == N_cov)
			N_anaSamp++;
	}

	/* Prepare memory */
	wsCalloc(Ba_misPheno, char, N_oriSamp);
	sseMalloc(Ra_anaY, wsReal, N_anaSamp);
	Ra_anaTcov = sseMatrix(N_cov+1, N_anaSamp);

	/* Get indicator and reduced Y matrix */
	if (N_cov) {
		for (i=I=0 ; i<N_oriSamp ; i++) {
			/* Check phenotype missingness */
			if (isMissingReal(Ra_phe[i])) {
				Ba_misPheno[i] = 1;
				continue;
			}

			/* Check covariate missingness */
			for (j=0 ; j<N_cov ; j++)
				if (isMissingReal(Ra_cov[j][i])) {
					Ba_misPheno[i] = 1;
					break;
				}
			/* Have no missing */
			if (j == N_cov) {
				Ra_anaY[I] = Ra_phe[i];
				Ra_anaTcov[0][I] = W1;
				for (j=0 ; j<N_cov ; j++)
					Ra_anaTcov[j+1][I] = Ra_cov[j][i];
				I++;
			}
		}
	} else for (i=I=0 ; i<N_oriSamp ; i++) {
		/* Check phenotype missingness */
		if (isMissingReal(Ra_phe[i])) {
			Ba_misPheno[i] = 1;
			continue;
		}

		Ra_anaY[I] = Ra_phe[i];
		Ra_anaTcov[0][I] = W1;
		I++;
	}
/**/Xp_0 = regression(N_anaSamp, Ra_anaY, 1+N_cov, Ra_anaTcov);
	/* Failed */
	if (!Xp_0)
		halt("Failed to fit NULL model, cannot proceed Q-test");
#ifdef Qvalidate
	exportVector("qtest.0.Y", Ra_anaY, N_anaSamp);
	exportMatrix("qtest.0.cov", Ra_anaTcov, 1+N_cov, N_anaSamp);
	exportVector("qtest.0.resid", Xp_0->Ra_residual, N_anaSamp);
	exportVector("qtest.0.beta", Xp_0->Ra_hatBeta, 1+N_cov);
#endif
	deallocMatrix(Ra_anaTcov, 1+N_cov, (void *)1);

	/* Sanity check */
	if (I != N_anaSamp)
		halt("SYSERR: Reduced Y size[%d] is unmatched with "
			"expectation[%d]", I, N_anaSamp);

	/*
	null.dist.Q3<-read.table("n.log10.minp.1e09.txt",header=T)
	totlength<-sum(null.dist.Q3[,2])
	get.finalp<-function(pval) {
	   (sum(null.dist.Q3[null.dist.Q3[,1]>-log10(pval),2])+1)/(totlength+1)
	}
	*/
	sseCalloc(Na_null, wsUint, WISARD_QTEST_N_PBIN);
	for (wsUint i=0 ; i<=6378 ; i++)
		Na_null[i] = Na_freq_0_6378[i];
	for (wsUint i=6379 ; i<=14411 ; i++)
		Na_null[i] = Na_6385_14411[i - 6379];
}

cQtestAnalysis::~cQtestAnalysis()
{
	DEALLOC(Ba_misPheno);
	sseFree(Ra_anaY);
	sseFree(Na_null);
	if (Xp_0) {
		sseFree(Xp_0->Ra_hatBeta);
		sseFree(Xp_0->Ra_residual);
		sseUnmat(Xp_0->Ra_covBeta, 1+Cp_IO->sizeCovar());
		delete Xp_0;
	}
//	sseUnmat(Ra_anaTcov, N_anaSamp);
}

wsReal* cQtestAnalysis::_makeWeight()
{
	wsUint	i;
	wsRealCst	*Ra_ppp_sqrt2pq
		= Cp_anaPPP->getPPPsq();
	///< Number of given SNPs
	wsUint	N_SNP	= Cp_IO->sizeVariant();
	wsReal	*Ra_w	= NULL;

	/* In case of custom weight and beta weight, weights will be stored to
	 * the buffer that pointed by Cp_IO->getSNPweight(),
	 * In case of --equalweight, all weights will be 1.0
	 * Otherwise, weight will be (2pq)^(-1/2) */
	if (IS_ASSIGNED(weight) || IS_ASSIGNED(betaweight)) {
		sseMalloc(Ra_w, wsReal, N_SNP);
		memcpy(Ra_w, Cp_IO->getWeight(Cp_anaPPP), sizeof(wsReal)*N_SNP);
	} else if (OPT_ENABLED(noweight)) {
		sseMalloc(Ra_w, wsReal, N_SNP);
#ifdef USE_SSE
		wsUint N_med = getMed(N_SNP);
		for (i=0 ; i<N_med ; i+=sseJmp)
			*((sse_t *)(Ra_w+i)) = sseSet(1.0);
		for (i=N_med ; i<N_SNP ; i++)
			Ra_w[i] = W1;
#else
		for (i=0 ; i<N_SNP ; i++)
			Ra_w[i] = W1;
#endif
	} else {
		sseMalloc(Ra_w, wsReal, N_SNP);
#ifdef USE_SSE
		sse_t sse_H = sseSet(1.0);
		wsUint N_med = getMed(N_SNP);
		for (i=0 ; i<N_med ; i+=sseJmp) {
			sse_t *sse_pW = (sse_t *)(Ra_w + i);
			sse_t *sse_pP = (sse_t *)(Ra_ppp_sqrt2pq + i);
			*sse_pW = sseDiv(sse_H, *sse_pP);
		}
		for (i=N_med ; i<N_SNP ; i++)
			Ra_w[i] = W1/Ra_ppp_sqrt2pq[i];
#else
		for (i=0 ; i<N_SNP ; i++)
			Ra_w[i] = W1/Ra_ppp_sqrt2pq[i];
#endif
	}

	return Ra_w;
}

wsReal cQtestAnalysis::_getWeight(wsUint N_idxSnp)
{
	wsRealCst	*Ra_ppp_sqrt2pq = Cp_anaPPP->getPPPsq();
	///< Number of given SNPs
	//wsReal	*Ra_w	= NULL;

	if (IS_ASSIGNED(weight) || IS_ASSIGNED(betaweight)) {
		return getIO()->getWeight(Cp_anaPPP)[N_idxSnp];
	} else if (OPT_ENABLED(noweight)) {
		return W1;
	}

	return W1/Ra_ppp_sqrt2pq[N_idxSnp];
}

wsReal cQtestAnalysis::_getWeight(vInt& Na_idxSnp)
{
	wsUint	N_SNP	= (wsUint)(Na_idxSnp.size());
	xMaf*	Xp_maf	= getIO()->getMAF();
	wsUint	i;

	if (IS_ASSIGNED(weight)) halt("Can't use weight");
	else if (IS_ASSIGNED(betaweight)) {
		wsReal	R_sumMaf	= W0;
		wsUint	N_beta		= 0;
		wsVec	Ra_bw		= loadRealValues(OPT_STRING(betaweight), &N_beta);
		if (N_beta != 2) halt("--betaweight should take 2 real values!");

		for (i=0 ; i<N_SNP ; i++)
			R_sumMaf += Xp_maf[i].R_maf;
		R_sumMaf /= (wsReal)N_SNP;

		wsReal R_ret = dbeta(R_sumMaf, Ra_bw[0], Ra_bw[1], 0);
		sseFree(Ra_bw);
		return R_ret;
	} else if (OPT_ENABLED(noweight)) {
		return W1;
	}

	wsReal R_sumMaf = W0;
	for (i=0 ; i<N_SNP ; i++)
		R_sumMaf += Xp_maf[i].R_maf;
	R_sumMaf /= (wsReal)N_SNP;

	return W1/sqrt(W2 * R_sumMaf *
		(W1 - R_sumMaf));
}

/* R conversion of Jaehoon's code
 * 
 * #############################################################
 * ## get.clumped.geno(geno,r2)                               ##
 * ##                                                         ##
 * ## Function for preprocessing genotype based on r^2 cutoff ##
 * #############################################################

 *
get.clumped.geno <- function(origeno,cut.r2) {
	# When there are multiple markers

	if (ncol(origeno)>1) {
		# Backup original genotype
		temp <- origeno

		# Get correlation with use="pair"
		cor.temp<-cor(temp,use="pairwise.complete.obs")

		# Remove lower triangle
		cor.temp[lower.tri(cor.temp,diag=TRUE)==TRUE]<-0

		# Replace NA into 0
		cor.temp[is.na(cor.temp)==TRUE]<-0

		# Make collapsing group
		idx.row<-which((cor.temp)^2>cut.r2)%%ncol(origeno)
		idx.col<-ceiling(which((cor.temp)^2>cut.r2)/ncol(origeno))
		if(length(idx.row)>1){
			corr.mat<-rbind(idx.row,idx.col)
			edge<-list();
			edge[[1]]<-as.numeric(corr.mat[,1])
			for(i in 2:length(idx.row)){
				edg.idx<-which(lapply(edge,function(vec0)length(which(vec0%in%corr.mat[,i])==TRUE))>0)
				if(length(edg.idx)==1) {
					edge[[edg.idx]]<-unique(c(as.numeric(corr.mat[,i]),as.numeric(edge[[edg.idx]])))}
				if(length(edg.idx)>1) {
					temp1<-c(unlist(edge[edg.idx]),as.numeric(corr.mat[,i]))
					edge[[edg.idx[1]]]<-temp1;edge[edg.idx[2:length(edg.idx)]]<-NULL
				}
				
				if(length(edg.idx)==0)
					edge[[length(edge)+1]]<-as.numeric(corr.mat[,i])
			}
			edge<-lapply(edge,unique)
			collapse.z<-lapply(edge,function(vec1){
					c.z<-apply(temp[,vec1],1,sum)
						return(c.z)
				})

			names(collapse.z)<-unlist(lapply(edge,function(vec2)paste("collapse",paste("_",vec2,collapse="",sep=""),sep="")))
			newgeno<-cbind(temp[,-unlist(edge)],data.frame(collapse.z));
			if(length(c(1:ncol(temp))[-unlist(edge)])==1){colnames(newgeno)[1]<-colnames(temp)[-unlist(edge)]}
			
			return(newgeno)
		}
		if(length(idx.row)==1){
			collapse.z<-list(apply(temp[,c(idx.row,idx.col)],1,sum))
			names(collapse.z)<-paste("collapse",idx.row,"_",idx.col,sep="")
			newgeno<-cbind(temp[,-c(idx.row,idx.col)],data.frame(collapse.z))
			if(length(c(1:ncol(temp))[-c(idx.row,idx.col)])==1){colnames(newgeno)[1]<-colnames(temp)[-c(idx.row,idx.col)]};return(newgeno)
		}
		if(length(idx.row)==0)
			return(temp)
	} else
		return(origeno)
}
*/

wsReal getSTT(wsUint N_L, wsReal R_a, wsReal R_STT)
{
	wsReal R_qgam = qgamma(W1 - R_STT, R_a, W1);
	wsReal R_Q = W1 - pgamma(N_L*R_qgam, N_L * R_a, W1);
	return R_Q;
}

wsReal getA(wsUint N_L, wsReal R_STT)
{
#define N_INTERVALS 200
	wsReal R_minDiff	= fabs(getSTT(N_L, W0, R_STT) - R_STT);
	wsUint N_minIdx		= 0;
	wsUint N_intv = N_INTERVALS - 1;
	wsReal R_intv = W1 / (wsReal)N_intv;
	wsUint i;
	for (i=1 ; i<=N_intv ; i++) {
		wsReal R_curDiff = fabs(getSTT(N_L, R_intv*i, R_STT) - R_STT);
		if (R_curDiff < R_minDiff) {
			R_minDiff = R_curDiff;
			N_minIdx = i;
		}
	}

	return R_intv*N_minIdx;
//	aa<-diff<-seq(0,1,length=200)
//	for(i in 1:length(aa)){
//		diff[i]<-abs(get.stt(L,aa[i],STT)-STT)
//	}
//	return(aa[which.min(diff)])
}

/*
get.stt<-function(L,a,STT){
  1-pgamma(L*qgamma(1-STT,a,1),L*a,1)
}
get.a<-function(L,STT){
  aa<-diff<-seq(0,1,length=200)
  for(i in 1:length(aa)){
    diff[i]<-abs(get.stt(L,aa[i],STT)-STT)
  }
  return(aa[which.min(diff)])
}
*/

void _imputRelGeno(wsReal **Ra_geno, vVariant &Xv_snp, wsUint N_samp, wsMat Ra_cor)
{
	wsUint	N_sz	= (wsUint)Xv_snp.size();

	/* Getting sample-wise mean */
	wsReal*	Ra_spMean	= sseMmeanR(Ra_geno, N_samp, N_sz);

	/* Now we have mean, for all marker, do impute */
	wsReal*	Ra_m1	= sseVector(N_samp);
	wsReal*	Ra_m2	= sseVector(N_samp);
	char*	Ba_m	= NULL;
	wsCalloc(Ba_m, char, N_samp);
	wsReal*	Ra_G	= sseVector(N_samp);
	for (wsUint j=0 ; j<N_sz ; j++) {
		wsUint I=0, J=0;
		for (wsUint i=0 ; i<N_samp ; i++)
			if (isMissingReal(Ra_geno[i][j])) {
				Ra_m1[I]	= Ra_spMean[i];
				Ba_m[i]		= 1;
			} else {
				Ra_G[J]		= Ra_geno[i][j];
				Ra_m1[J]	= Ra_spMean[i];
			}
		if (I == 0) continue;

		cVector a(Ra_m2, I);
		cVector m2(Ra_G, I);
		a -= m2;

		/* Make 12 and 22 */
		cStdMatrix	M_12(I, J);
		cSymMatrix	M_22(J);
		wsMat	Ra_12 = M_12.get();
		wsSym	Ra_22 = M_22.get();
		I = J = 0;
		for (wsUint i=0 ; i<N_samp ; i++) {
			if (Ba_m[i]) /* Go 12 */ for (wsUint j=0,K=0 ; j<N_samp ; j++) {
				if (Ba_m[j]) Ra_12[I][K++] = Ra_cor[i][j];
			} else /* Go 22 */ for (wsUint j=0,K=0 ; K<=J ; j++) {
				if (Ba_m[j]) Ra_22[I][K++] = Ra_cor[i][j];
			}
		}
		cSymMatrix &M_22i = M_22.inv();

		M_12 *= M_22i;
		delete &M_22i;

		cVector Q = M_12*a;
		sseVsV(Ra_m1, Q.get(), Ra_m1, N_sz);

		I = 0;
		for (wsUint i=0 ; i<N_samp ; i++)
			if (isMissingReal(Ra_geno[i][j]))
				Ra_geno[i][j] = Ra_m1[I++];
	}
}

inline wsReal _getWeight(cIO *Cp_IO, cPPPAnalysisV2 *Cp_anaPPP, wsUint N_idxSnp)
{
	wsRealCst	*Ra_ppp_sqrt2pq = Cp_anaPPP->getPPPsq();
	///< Number of given SNPs
	//wsReal	*Ra_w	= NULL;

	if (IS_ASSIGNED(weight) || IS_ASSIGNED(betaweight)) {
		return Cp_IO->getWeight(Cp_anaPPP)[N_idxSnp];
	} else if (OPT_ENABLED(noweight)) {
		return W1;
	}

	return W1/Ra_ppp_sqrt2pq[N_idxSnp];
}

inline wsReal _getWeight(cIO *Cp_IO, cPPPAnalysisV2 *Cp_anaPPP, vInt& Na_idxSnp)
{
	wsUint	N_SNP	= (wsUint)(Na_idxSnp.size());
	xMaf*	Xp_maf	= Cp_IO->getMAF();
	wsUint	i;

	if (IS_ASSIGNED(weight)) halt("Can't use weight");
	else if (IS_ASSIGNED(betaweight)) {
		wsReal R_sumMaf = W0;
		for (i=0 ; i<N_SNP ; i++)
			R_sumMaf += Xp_maf[i].R_maf;
		R_sumMaf /= (wsReal)N_SNP;
		wsUint	N_beta	= 0;
		wsVec	Ra_bw	= loadRealValues(OPT_STRING(betaweight), &N_beta);
		if (N_beta != 2) halt("--betaweight should take 2 real values!");
		wsReal R_ret = dbeta(R_sumMaf, Ra_bw[0], Ra_bw[1], 0);
		sseFree(Ra_bw);
		return R_ret;
	} else if (OPT_ENABLED(noweight)) {
		return W1;
	}

	wsReal R_sumMaf = W0;
	for (i=0 ; i<N_SNP ; i++)
		R_sumMaf += Xp_maf[i].R_maf;
	R_sumMaf /= (wsReal)N_SNP;

	return W1/sqrt(W2 * R_sumMaf *
		(W1 - R_sumMaf));
}

wsMat doGenoClumping(vInt &Xa_snp, cIO *Cp_IO, cPPPAnalysisV2 *Cp_anaPPP,
	wsUint *Np_finSnp, wsReal **Rp_finWgt, char B_imp, char B_addItcp,
	wsReal R_thr/*=REAL_CONST(0.05)*/,
	char B_export/*=0*/, wsStrCst S_gName/*=NULL*/)
{
	char**		Na_data		= Cp_IO->getGenotype();
	wsUint		N_samp		= Cp_IO->sizeSample();
	vVariant&	Xv_vrt		= Cp_IO->getVariant();
	vSampPtr&	Xv_smp		= Cp_IO->getSample();
	xMaf*		Xp_maf		= Cp_IO->getMAF();
	wsUint		N_sz		= (wsUint)Xa_snp.size();
	wsUint		N_rSamp		= N_samp;

	wsUint		N_valIdx	= 1;	/* Index of clumping to be inserted */
	wsUint*		Na_idxClp	= NULL;
	wsCalloc(Na_idxClp, wsUint, N_sz);

	/* Number of clumped markers */
	wsUint		N_mkrClump	= 0;
	/* Number of clumped clusters (may LESS than N_valIdx) */
	wsUint		N_clusClump	= 0;
	/* Indices of cluster, size #snp */
	wsUint*		Na_szClus	= NULL;

	/* Make subset at first */
	wsMat		Ra_sub			= sseMatrix(N_sz, N_samp);

	if (!B_imp) FOREACH (vInt_it, Xa_snp, i) {
		wsReal *Np_sub = Ra_sub[*i];

		for (wsUint j=0 ; j<N_samp ; j++)
			Np_sub[j] = Na_data[j][*i];
	} else FOREACH (vInt_it, Xa_snp, i) {
		wsAlloc(Ra_sub[*i], wsReal, N_samp);
		wsReal *Rp_sub = Ra_sub[*i];

		for (wsUint j=0 ; j<N_samp ; j++) {
			wsReal R_geno = (wsReal)Na_data[j][*i];
	
			Rp_sub[j] = isMissing(R_geno) ? _imputeGeno(Xv_vrt[*i], Xv_smp[j], Xp_maf[*i].R_maf) :
				R_geno;
		}
	}

	/* Get p^2 to perform clumping */
	/* Get correlation */
	for (wsUint i=0 ; i<N_sz ; i++) for (wsUint j=0 ; j<i ; j++) {
//		wsUint	N		= 0;
		wsReal	R_r2	= W0;

		/* Get r^2 */
		if (B_imp)
			R_r2 = corPearsonComplete(Ra_sub[i], Ra_sub[j], N_rSamp);
		else
			R_r2 = corPearsonIncomplete(Ra_sub[i], Ra_sub[j], N_rSamp);
		R_r2 *= R_r2;

		/* If this r^2 over threshold, do clumping */
		if (R_r2 > R_thr) {
			if (Na_idxClp[i] && Na_idxClp[j]) {
				/* case 1 : both are already have index, but different */
				if (Na_idxClp[i] != Na_idxClp[j]) {
					/* Replace one of index into the other's one */
					wsUint N_idxReplaceTarget = Na_idxClp[j];
					for (wsUint k=0 ; k<N_sz ; k++)
						if (Na_idxClp[k] == N_idxReplaceTarget)
							Na_idxClp[k] = Na_idxClp[i];
				}
				/* case 2 : both are already have index, and same */
				/* Do nothing */
			} else if (Na_idxClp[i] || Na_idxClp[j]) {
				/* case 3 : only one have index */
				/* Assign that index */
				if (Na_idxClp[i]) Na_idxClp[j] = Na_idxClp[i];
				else Na_idxClp[i] = Na_idxClp[j];
			}
			/* case 4 : none have index */
			else if (!Na_idxClp[i] && !Na_idxClp[j]) {
				/* Assign new index */
				Na_idxClp[i] = Na_idxClp[j] = N_valIdx++;
			} else
				halt("SYSERR: Unhandled case");
		}
	}

	wsCalloc(Na_szClus, wsUint, N_valIdx);
	/* Find clumped SNPs and newly count the resulted number of markers */
	for (wsUint i=0 ; i<N_sz ; i++)
		if (Na_idxClp[i]) {
			Na_szClus[Na_idxClp[i]]++;
			N_mkrClump++;
		}
	for (wsUint i=1 ; i<N_valIdx ; i++)
		if (Na_szClus[i]) N_clusClump++;

	/* N_markerClumped markers reduced to N_actualClus
	 * so final number of markers is N_set - N_markerClumped + N_actualClus and intercept */
	wsUint	N_finSnp = N_sz - N_mkrClump + N_clusClump + B_addItcp;
	wsReal*	Ra_finWgt = NULL;
	sseMalloc(Ra_finWgt, wsReal, N_finSnp-B_addItcp);

	/* Create clumping buffer */
// 	wsReal **Ra_export = NULL;
// 	if (B_export)
// 		Ra_export = sseMatrix(N_finMarker-B_addItcp, N_sample);
	wsReal **Ra_ret = sseEmptyMatrix(N_finSnp, N_rSamp);

	/* Filling non-clumped marker first (1st ~ N_originClumped(th) col.) */
	wsUint N_idx4clumped = N_sz - N_mkrClump;
	wsUint I=B_addItcp, K=N_idx4clumped+1;//, J=0;

	/* Add intercept if required */
	if (B_addItcp) sseVinit(Ra_ret[0], N_rSamp, W1);

	/* Build NON-CLUMPED PART FIRST */
	vStr Xa_snpNames;
	for (wsUint i=0 ; i<N_sz ; i++) {
		if (Na_idxClp[i] != 0) continue;

		/* Fill normal weight */
		Ra_finWgt[I-B_addItcp] = _getWeight(Cp_IO, Cp_anaPPP, Xa_snp[i]);

		/* Intercept */
		memcpy(Ra_ret[I++], Ra_sub[i], sizeof(wsReal)*N_rSamp);
		Xa_snpNames.push_back((string)(Xv_vrt[Xa_snp[i]].name));
	}

	/* Filling clumped marker later */
	for (wsUint i=1 ; i<N_valIdx ; i++) {
		/* Do not consider INTEGRATED cluster */
		if (Na_szClus[i] == 0) continue;

		vInt	Na_idxSnps;
		string	S_conF;
		for (wsUint k=0 ; k<N_sz ; k++)
			if (Na_idxClp[k] == i) {
				Na_idxSnps.push_back(Xa_snp[k]);
				if (S_conF.length()) {
					S_conF.append(",");
					S_conF.append(Xv_vrt[Xa_snp[k]].name);
				} else S_conF.append(Xv_vrt[Xa_snp[k]].name);
			}
		Ra_finWgt[K-1] = _getWeight(Cp_IO, Cp_anaPPP, Na_idxSnps);
		Xa_snpNames.push_back(S_conF);

		/* Sum up clumped marker's genotype for each sample */
		for (wsUint k=0 ; k<N_sz ; k++)
			if (Na_idxClp[k] == i) {
				for (wsUint j=0 ; j<N_rSamp ; j++)
					/* Do sum-up */
					if (!isMissingReal(Ra_sub[k][j]))
						Ra_ret[K][j] += Ra_sub[k][j];
			}
		K++;
	}
	if (B_export) {
		char	S_extFn[512];
		sprintf(S_extFn, "%s.clumped.mat", S_gName);
		exportMatrix(S_extFn, Ra_ret+B_addItcp, N_finSnp-B_addItcp,
			N_rSamp, NULL, &Xa_snpNames);
	}

	DEALLOC(Na_idxClp);
	DEALLOC(Na_szClus);
	*Np_finSnp	= N_finSnp;
	*Rp_finWgt	= Ra_finWgt;

	return Ra_ret;
}

wsMat cQtestAnalysis::_getClumpedGeno(wsStrCst S_gname, vInt &Xa_snp, char **Na_data,
	wsUint *Np_finMarker, wsReal **Rp_W, char *Ba_filt/*=NULL*/)
{
	if (Ba_filt == NULL)
		Ba_filt = Ba_misPheno;
	wsUint		i, j, k;
	wsUint		N_set		= (wsUint)Xa_snp.size();
	vVariant&	Xa_snps		= getIO()->getVariant();
	xMaf*		Xp_maf		= getIO()->getMAF();
	wsUint		N_sample	= Cp_IO->sizeSample();

	wsUint		N_valIdx	= 1;	/* Index of clumping to be inserted */
	wsUint*		Na_idxClp	= NULL;
	wsCalloc(Na_idxClp, wsUint, N_set);

	/* Number of clumped markers */
	wsUint N_markerClumped = 0;
	/* Number of clumped clusters (may LESS than N_valIdx) */
	wsUint N_actualClus = 0;
	/* Indices of cluster, size #snp */
	wsUint *Na_szClus = NULL;

	/* Do nothing if there are NOT multiple markers
	 * or, --qtestnoclump is on */
	if (N_set > 1 && OPT_ENABLED(qtestclump)) {
		/* Get correlation */
		for (i=0 ; i<N_set ; i++) for (j=0 ; j<i ; j++) {
			wsUint X = Xa_snp[i];
			wsUint Y = Xa_snp[j];
			wsUint N = 0;
			wsUint sumXY = 0;
			wsUint sumX = 0;
			wsUint sumY = 0;
			wsUint sumX2 = 0;
			wsUint sumY2 = 0;
			for (k=0 ; k<N_sample ; k++) {
				if (Ba_filt[k]) continue;

				char x = Na_data[k][X];
				char y = Na_data[k][Y];
				/* use="pair" */
				if (!isMissing(x) && !isMissing(y)) {
					sumXY += x*y;
					sumX2 += SQR(x);
					sumY2 += SQR(y);
					sumX  += x;
					sumY  += y;

					N++;
				}
			}
		
			/* Get r^2 */
			wsReal R_r2 = ((wsReal)N*(wsReal)sumXY - (wsReal)sumX*(wsReal)sumY) /
				(sqrt((wsReal)N*(wsReal)sumX2-(wsReal)sumX*(wsReal)sumX) *
				sqrt((wsReal)N*(wsReal)sumY2-(wsReal)sumY*(wsReal)sumY));
			R_r2 *= R_r2;

			/* If this r^2 over threshold, do clumping */
			if (R_r2 > REAL_CONST(0.05)) {
				if (Na_idxClp[i] && Na_idxClp[j]) {
				/* case 1 : both are already have index, but different */
					if (Na_idxClp[i] != Na_idxClp[j]) {
						/* Replace one of index into the other's one */
						wsUint N_idxReplaceTarget = Na_idxClp[j];
						for (k=0 ; k<N_set ; k++)
							if (Na_idxClp[k] == N_idxReplaceTarget)
								Na_idxClp[k] = Na_idxClp[i];
					}
					/* case 2 : both are already have index, and same */
					/* Do nothing */
				} else if (Na_idxClp[i] || Na_idxClp[j]) {
					/* case 3 : only one have index */
					/* Assign that index */
					if (Na_idxClp[i]) Na_idxClp[j] = Na_idxClp[i];
					else Na_idxClp[i] = Na_idxClp[j];
				}
				/* case 4 : none have index */
				else if (!Na_idxClp[i] && !Na_idxClp[j]) {
					/* Assign new index */
					Na_idxClp[i] = Na_idxClp[j] = N_valIdx++;
				} else
					halt("SYSERR: Unhandled case");
			}
		}

		wsCalloc(Na_szClus, wsUint, N_valIdx);
		/* Find clumped SNPs and newly count the resulted number of markers */
		for (i=0 ; i<N_set ; i++)
			if (Na_idxClp[i]) {
				Na_szClus[Na_idxClp[i]]++;
				N_markerClumped++;
			}
		for (i=1 ; i<N_valIdx ; i++)
			if (Na_szClus[i]) N_actualClus++;
	}

//	Ra_W = _makeLocalWeight(Na_idxClp, N_set, N_valIdx, Na_szClus);

	/* N_markerClumped markers reduced to N_actualClus
	 * so final number of markers is N_set - N_markerClumped + N_actualClus */
	wsUint	N_finMarker = N_set - N_markerClumped + N_actualClus + 1;
	wsReal	*Ra_W = NULL;
	sseMalloc(Ra_W, wsReal, N_finMarker-1);

	/* Create clumping buffer */
	wsReal **Ra_export = NULL;
	if (OPT_ENABLED(makeclgeno))
		Ra_export = sseMatrix(N_finMarker-1, N_sample);
	wsReal **Ra_ret = sseMatrix(N_finMarker, N_sample);

	/* Filling non-clumped marker first (1st ~ N_originClumped(th) col.) */
	wsUint N_originClumped = N_set - N_markerClumped;
	wsUint I=1, K=N_originClumped+1, J=0;
	for (j=0 ; j<N_sample ; j++) {
		if (Ba_filt[j]) continue;
		Ra_ret[0][J] = W1;
		J++;
	}
	vStr Xa_snpNames;
	for (i=0 ; i<N_set ; i++) {
		if (Na_idxClp[i] != 0) continue;

		/* Fill normal weight */
		Ra_W[I-1] = _getWeight(Xa_snp[i]);

		/* Intercept */
		J = 0;
		if (Ra_export) for (j=0 ; j<N_sample ; j++) {
			if (Ba_filt[j]) continue;

			if (isMissing(Na_data[j][Xa_snp[i]])) {
				Ra_ret[I][J] = Xp_maf[Xa_snp[i]].R_maf * W2;
				Ra_export[I-1][J++] = WISARD_NA_REAL;
			} else {
				Ra_export[I-1][J] = Ra_ret[I][J] = Na_data[j][Xa_snp[i]];
				J++;
			}
		}
		else for (j=0 ; j<N_sample ; j++) {
			if (Ba_filt[j]) continue;

			if (isMissing(Na_data[j][Xa_snp[i]]))
				Ra_ret[I][J++] = Xp_maf[Xa_snp[i]].R_maf * W2;
			else
				Ra_ret[I][J++] = Na_data[j][Xa_snp[i]];
		}
		I++;
		Xa_snpNames.push_back((string)(Xa_snps[Xa_snp[i]].name));
	}

	/* Filling clumped marker later */
	for (i=1 ; i<N_valIdx ; i++) {
		/* Do not consider INTEGRATED cluster */
		if (Na_szClus[i] == 0) continue;

		vInt Na_idxSnps;
		string S_conF;
		for (k=0 ; k<N_set ; k++)
			if (Na_idxClp[k] == i) {
				Na_idxSnps.push_back(Xa_snp[k]);
				if (S_conF.length()) {
					S_conF.append(",");
					S_conF.append(Xa_snps[Xa_snp[k]].name);
				} else S_conF.append(Xa_snps[Xa_snp[k]].name);
			}
		Ra_W[K-1] = _getWeight(Na_idxSnps);
		Xa_snpNames.push_back(S_conF);

		/* Sum up clumped marker's genotype for each sample */
		J = 0;
		for (j=0 ; j<N_sample ; j++) {
			if (Ba_filt[j]) continue;
			wsReal R_sum = W0;

			/* Do sum-up */
			if (Ra_export) {
				wsUint N_val = 0;
				wsReal R_eSum = W0;
				for (k=0 ; k<N_set ; k++)
					if (Na_idxClp[k] == i) {
						if (isMissing(Na_data[j][Xa_snp[k]]))
							R_sum += Xp_maf[Xa_snp[k]].R_maf * W2;
						else {
							N_val++;
							R_eSum+= Na_data[j][Xa_snp[k]];
							R_sum += Na_data[j][Xa_snp[k]];
						}
					}

				Ra_ret[K][J] = R_sum;
				if (N_val) Ra_export[K-1][J] = R_eSum;
				else Ra_export[K-1][J] = WISARD_NA_REAL;
				J++;
			} else {
				for (k=0 ; k<N_set ; k++)
					if (Na_idxClp[k] == i) {
						if (isMissing(Na_data[j][Xa_snp[k]]))
							R_sum += Xp_maf[Xa_snp[k]].R_maf * W2;
						else
							R_sum += Na_data[j][Xa_snp[k]];
					}

				Ra_ret[K][J++] = R_sum;
			}
		}
		K++;
	}
	if (OPT_ENABLED(makeclgeno)) {
		wsReal R_miss = WISARD_NA_REAL;
		char S_extFn[512];
		sprintf(S_extFn, "%s.clumped.mat", S_gname);
		exportMatrix(S_extFn, Ra_export, N_finMarker-1, N_anaSamp, NULL,
			&Xa_snpNames, &R_miss);
		deallocMatrix(Ra_export, N_finMarker-1, (void *)1);
	}

	DEALLOC(Na_idxClp);
	DEALLOC(Na_szClus);
	*Np_finMarker	= N_finMarker;
	*Rp_W			= Ra_W;

	return Ra_ret;
}

xRegression* cQtestAnalysis::regression(wsUint N_obs, wsReal *Ra_Y,
	wsUint N_var, wsReal **Ra_Xt)
{
	xRegression *X_ret = new xRegression;
	cVector V_y(Ra_Y, N_obs, 1);
	/* Otherwirse, perform FEMMA analysis */
	cStdMatrix M_Xt(MATOPT_DELNONE, N_var, N_obs, Ra_Xt);

	/* With --indep, perform normal regression */
	if (1) {//OPT_ENABLED(indep)) {
		/* Xty */
		cVector V_Xty = M_Xt * V_y;
		/* XtX */
		cSymMatrix	M_XtX		= M_Xt.Mt();
		cSymMatrix&	M_XtXinv	= M_XtX.invOnly();
		wsSym		Ra_XtXinv	= NULL;
		cVector		V_betaHat;

		if (M_XtXinv.get() == NULL) {
			cSymMatrix M_XtXinv2 = M_XtX.einv();
			if (M_XtXinv2.get() == NULL)
				return NULL;
			M_XtXinv2.setDontDealloc();
			Ra_XtXinv = M_XtXinv2.get();
			/* Get beta estimate ^beta = (X'X)^-1X'y */
			V_betaHat = M_XtXinv2 * V_Xty;
		} else {
			M_XtXinv.setDontDealloc();
			Ra_XtXinv = M_XtXinv.get();
			/* Get beta estimate ^beta = (X'X)^-1X'y */
			V_betaHat = M_XtXinv * V_Xty;
		}
		M_XtX.rem();

		V_betaHat.setDontDealloc();
		X_ret->Ra_hatBeta = V_betaHat.get();
		V_Xty.rem();
		wsReal R_tDF = (wsReal)(N_obs - N_var);

		/* Get residual e = y- X %*% ^beta */
		cVector V_yHat	= M_Xt.tV(V_betaHat);
		cVector V_res	= V_y - V_yHat;
		V_res.setDontDealloc();
		X_ret->Ra_residual = V_res.get();
		//sseVsV(Ra_Y, X_ret->Ra_residual, X_ret->Ra_residual, N_samp);

		/* Get sigma^2 */
		wsReal R_sig2 = V_res.ss() / R_tDF;
		X_ret->Ra_covBeta = sseSymMat(N_var);
		sseSpC((wsSymCst)Ra_XtXinv, R_sig2, X_ret->Ra_covBeta, N_var);
		sseUnmat(Ra_XtXinv, N_var);
		delete &M_XtXinv;

		return X_ret;
	}
	/* No need to do NULL test of GEMMA because it should be already done */
	return NULL;
}

/*
QTest.perm<-function(y,covadat,geno.set1, cut.r2=0.05, n.perm=200,a=0.2,outname){
 IG.perm<-GM.perm<-CIC.perm<-rep(0,n.perm)
 E.GM.perm0<-V.GM.perm0<-E.IG.perm0<-V.IG.perm0<-rep(0,length(geno.set1))
 p.rslt<-list()
 yperm.dat<-matrix(0,length(y),n.perm)
 for(q in 1:n.perm){set.seed(q);yperm.dat[,q]<-sample(y,length(y))}
 for(k in 1:length(geno.set1)){
 cat("permutation step for gene ",k,"/",length(geno.set1),"..","\n");flush.console();
 p.Q1.perm<-p.Q0.perm<-p.Q.perm<-rep(NA,n.perm)
 for(q in 1:n.perm){
 yperm<-yperm.dat[,q]
 if(length(covadat)!=0){resid.perm<-resid(glm(yperm~.,data=data.frame(covadat),na.action=na.exclude))}
 if(length(covadat)==0){resid.perm<-resid(glm(yperm~1,na.action=na.exclude))}
 fit.perm<-try(glm(resid.perm~.,data=data.frame(geno.set1[[k]])),TRUE)
 coef<-try(coef(summary(fit.perm))[-1,1:2],TRUE)
 if(mode(fit.perm)=="character"){length(coef)<-0}
 if(length(coef)!=0){
 if(length(coef)!=2){beta.perm<-coef[,1];se.perm<-coef[,2]}
 if(length(coef)==2){beta.perm<-coef[1];se.perm<-coef[2]}
 vv.perm<-vcov(fit.perm)[-1,-1]
 alpha.perm<-(1/(se.perm^2))/sum(1/(se.perm^2));z.score.perm<-(t(alpha.perm)%*%beta.perm)/sqrt(t(alpha.perm)%*%vv.perm%*%alpha.perm)
 p.Q1.perm[q]<-pchisq(z.score.perm^2,df=1,lower.tail=F)
 p.Q0.perm[q]<-pchisq(sum((beta.perm/se.perm)^2),lower.tail=F,df=length(beta.perm))
 p.Q.perm[q]<-pchisq((sum((beta.perm/se.perm)^2)+z.score.perm^2)*(length(beta.perm)+1)/(length(beta.perm)+3),df=((length(beta.perm)+1)^2)/(length(beta.perm)+3),lower.tail=F)
 p0.perm<-pchisq((beta.perm/se.perm)^2,df=1,lower.tail=F) 
 p.perm<-c(p.Q1.perm[q],p0.perm)
 GM.perm[q]<-2*sum(qgamma(p0.perm,a,1,lower.tail=F))
 IG.perm[q]<-2*sum(qgamma(p.perm,a,1,lower.tail=F))
 }
 }
 E.GM.perm0[k]<-mean(GM.perm);V.GM.perm0[k]<-var(GM.perm)
 E.IG.perm0[k]<-mean(IG.perm);V.IG.perm0[k]<-var(IG.perm)
 p.rslt[[k]]<-cbind(p.Q1.perm,p.Q0.perm,p.Q.perm)
 }
 write.table(data.frame(gene=names(geno.set1),p=do.call(rbind, lapply(p.rslt,function(v)v[,1]))),paste("perm.p.Q1.",outname,".txt",sep=""),quote=F,row.names=F)	
 write.table(data.frame(gene=names(geno.set1),p=do.call(rbind, lapply(p.rslt,function(v)v[,2]))),paste("perm.p.Q2.",outname,".txt",sep=""),quote=F,row.names=F)	
 write.table(data.frame(gene=names(geno.set1),p=do.call(rbind, lapply(p.rslt,function(v)v[,3]))),paste("perm.p.Q3.",outname,".txt",sep=""),quote=F,row.names=F)	
 perm.rslt=data.frame(gene=names(geno.set1),E.GM.perm0,V.GM.perm0,E.IG.perm0,V.IG.perm0)
 rownames(perm.rslt)<-1:nrow(perm.rslt)
 return(perm.rslt)
 }	
*/

wsReal cQtestAnalysis::_decomp(cSymMatrix &M_v, cVector &V_beta1, wsReal *Rp_Q2)
{
	/* eig   <- eigen(v)    */
	/* u     <- eig$vectors */
	/* l     <- eig$values  */
	wsUint	N_d			= M_v.row();
//	char	B_stat		= 0;
/**/wsReal	**Ra_eVec	= NULL;
	cStdMatrix
			M_eVec;
/**/wsReal	*Ra_eVal	= NULL;

	cVector V_eVal = M_v.eigen(M_eVec);
	V_eVal.setDontDealloc();
	M_eVec.setClean();
	Ra_eVal = V_eVal.get();
	Ra_eVec = M_eVec.get();

// eigenDecomp(M_v.get(), M_v.row(),
// 		&B_stat, &Ra_eVec);

	/* na.l  <- which(l/mean(l) < 0.01) */
	wsReal R_meanL2		= sseVsum(Ra_eVal, N_d) / (wsReal)N_d;
	wsUint N_finD		= 0;
	for (wsUint i=0 ; i<N_d ; i++)
		if (Ra_eVal[i] / R_meanL2 >= REAL_CONST(.01))
			N_finD++;

	/* if (length(na.l) > 0) { */
	if (N_finD != N_d) {
		if (N_finD == 0) {
			/* Can't do test */
			sseUnmat(Ra_eVec, N_d);
			sseFree(Ra_eVal);
			return WISARD_NAN;
		}
		/* l   <- l[-na.l]  */
		/* u   <- u[,-na.l] */
/**/	wsReal	*Ra_nEval	= NULL;
/**/	wsMat	Ra_rEvec	= sseMatrix(N_d, N_finD);
		sseMalloc(Ra_nEval, wsReal, N_finD);

		for (wsUint i=0,I=0 ; i<N_d ; i++) {
			if (Ra_eVal[i] / R_meanL2 < REAL_CONST(.01)) continue;

			Ra_nEval[I]	= Ra_eVal[i];
			for (wsUint j=0 ; j<N_d ; j++)
				Ra_rEvec[j][I] = Ra_eVec[j][i];
			I++;
		}
		sseFree(Ra_eVal);
		sseUnmat(Ra_eVec, N_d);

		Ra_eVal = Ra_nEval;
		Ra_eVec = Ra_rEvec;
	}

	/* p     <- pchisq((t(u)%*%beta1)^2/l, df=1, lower.tail=FALSE) */
/**/wsReal *Ra_pBeta	= V_beta1.get();
/**/wsReal **Ra_p2		= sseMpM(&Ra_pBeta, 1, N_d, Ra_eVec, N_d, N_finD);
	sseUnmat(Ra_eVec, N_d);
	sseVpV(Ra_p2[0], Ra_p2[0], Ra_p2[0], N_finD);
	sseVdV(Ra_p2[0], Ra_eVal , Ra_p2[0], N_finD);
	sseFree(Ra_eVal);
	for (wsUint i=0 ; i<N_finD ; i++)
		Ra_p2[0][i]		= PVchisq(Ra_p2[0][i], 1.0);

	/* a     <- get.a(length(p), STT) */
	wsReal R_a		= getA(N_finD, R_stt);

	/* q     <- 2*(qgamma(p, a, 1, lower.tail=FALSE)) */
	wsReal R_Q2		= W0;
	for (wsUint i=0 ; i<N_finD ; i++)
		R_Q2	   += W2 * qgamma(Ra_p2[0][i], R_a, W1, 0);
	sseUnmat(Ra_p2, 1);

	if (Rp_Q2)
	*Rp_Q2 = R_Q2;

	return PVchisq(R_Q2, R_a*N_finD*W2);
}

void cQtestAnalysis::_doTest(wsStrCst Sp_gname, xRegression *Xp_0, vInt &Xa_set,
	wsRealCst *Ra_origY, wsUint N_samp, char **Na_data,
	wsReal *Ra_pVals, wsUint *Np_szFin, wsUint *Np_sampFin,
	wsReal *Rp_zQ1, wsReal *Rp_zQ2)
{
	wsUint		N_sz		= 0;
	wsReal		*Ra_W		= NULL;
	xRegression	*Xp_cur0	= NULL;
	wsUint		N_curSamp	= 0;
	xRegression *Xp_full = NULL;
	wsUint		N_snp		= 0;
	cDiagMatrix	M_W;

#ifdef Qvalidate
	char		S_fn[256];
#endif

	char*	Ba_miss = NULL;
	if (OPT_ENABLED(avail)) {
		wsUint	N_set	= (wsUint)Xa_set.size();
		wsAlloc(Ba_miss, char, N_samp);
		memcpy(Ba_miss, Ba_misPheno, sizeof(char)*N_samp);

		/* Make subset */
		for (wsUint i=0 ; i<N_set ; i++) {
			wsUint X = Xa_set[i];
			for (wsUint j=0 ; j<N_samp ; j++)
				if (isMissing(Na_data[j][X]))
					Ba_miss[j] = 1;
		}

		//wsUint N_nSamp = 0;

		/* Make subset of Y */
		for (wsUint i=0 ; i<N_samp ; i++)
			if (!Ba_miss[i]) N_curSamp++;

		/* Reallocate Y */
		wsUint N_covWitct = 0;
		wsMat Ra_curCov = NULL;
		wsReal *Ra_curY = Cp_IO->subsetPheCovItct(Ba_miss, 1, N_curSamp,
			&Ra_curCov, &N_covWitct);
		for (wsUint i=0,j=0 ; i<N_samp ; i++)
			if (!Ba_miss[i]) Ra_curY[j++] = Ra_origY[i];
		
		/* Recalc Y */
/**/	Xp_cur0 = regression(N_curSamp, Ra_curY, N_covWitct, Ra_curCov);
		if (!Xp_cur0) return;
	} else {
		Xp_cur0		= Xp_0;
		N_curSamp	= N_anaSamp;
	}
	*Np_sampFin	= N_curSamp;

	/* Do clumping and get genotype matrix */
//	wsUint	N_snp		= (wsUint)Xa_set.size();
/**/wsReal		**Ra_geno	= _getClumpedGeno(Sp_gname, Xa_set, Na_data,
		&N_sz, &Ra_W, Ba_miss);

	vVariant&	Xa_snps	= getIO()->getVariant();
#ifdef Qvalidate
	vSampPtr&	Xa_smps	= getIO()->getSample();
	vStr		Xa_sampNames;
	vStr		Xa_snpNames;
	Xa_snpNames.push_back((string)"INTERCEPT");
	wsUint III = 0;
	FOREACHDO (vSampPtr_it, Xa_smps, i, III++) {
		if (Ba_misPheno[III]) continue;
		Xa_sampNames.push_back((*i)->S_IID);
	}
	/* Make set names */
	FOREACH (vInt_it, Xa_set, i)
		Xa_snpNames.push_back((string)Xa_snps[*i].name);
	sprintf(S_fn, "%s.X", Sp_gname);
	wsReal **Ra_tGeno = transpose(Ra_geno, N_sz, N_curSamp);
	exportMatrix(S_fn, Ra_tGeno, N_curSamp, N_sz, &Xa_snpNames, &Xa_sampNames);
	sseUnmat(Ra_tGeno, N_curSamp);
#endif
	N_snp		= N_sz - 1;
	*Np_szFin	= N_snp;
	M_W.init(N_snp, Ra_W);
	//wsUint	N_cov		= Cp_IO->getCovariateSize();

	/* Fitting residual with X */
	Xp_full = regression(N_curSamp, Xp_cur0->Ra_residual,
		N_sz, Ra_geno);
	sseUnmat(Ra_geno, N_sz);

	/* Failed */
	if (!Xp_full) return;
#ifdef Qvalidate
	sprintf(S_fn, "%s.beta", Sp_gname);
	exportVector(S_fn, Xp_full->Ra_hatBeta, N_sz);
#endif

	if (OPT_ENABLED(makebeta)) {
		cVector V_vv(Xp_full->Ra_hatBeta, N_sz, 1);
		char S_fn[256];
		sprintf(S_fn, "%s.qtest.beta", Sp_gname);
		V_vv.file(S_fn);
	}

	/* vv<-vcov(fit)[-1,-1] */
/**/cSymMatrix M_vv(sseSsubset(Xp_full->Ra_covBeta, 1, N_snp), N_snp);
	sseUnmat(Xp_full->Ra_covBeta, N_sz);
	if (OPT_ENABLED(qtestbetacov)) {
		char S_fn[256];
		sprintf(S_fn, "%s.qtest.cov", Sp_gname);
		vStr x;
		FOREACH (vInt_it, Xa_set, i)
			x.push_back((string)(Xa_snps[*i].name));
		M_vv.file(S_fn, &x);
	}
#ifdef Qvalidate
	sprintf(S_fn, "%s.vv", Sp_gname);
	M_vv.file(S_fn);
#endif
//	wsReal **Ra_vv = M_vv.get();

	/* Take sqrt */
	cVector V_alpha = M_vv.diagInv2vec();
//	wsReal *Ra_alpha = V_alpha.get();
	//wsReal R_sum1sqse = W0;
	//sseMalloc(Ra_alpha, wsReal, N_snp);

#ifdef Qvalidate
	sprintf(S_fn, "%s.alpha", Sp_gname);
	V_alpha.file(S_fn);
#endif
	/* Get 1/se^2 --> 1/var(betaHat_i)
	 * 
	 *	invSqse <- 1/(se1^2)
	 *	[BEF] alpha<- invSqse/sum(invSqse)
	 *	[AFT] alpha <- invSqse */
//	for (wsUint i=0 ; i<N_snp ; i++) {
		//Ra_alpha[i] = 
//		R_sum1sqse += Ra_alpha[i];
//	}
	/* alpha<- invSqse/sum(invSqse) */
//	sseVpC(Ra_alpha, W1/R_sum1sqse, Ra_alpha, N_snp);

	/* aW <- t(alpha)%*%WS
	 * var.pool<- aW %*% vv %*% t(aW) */
	cVector V_beta1(N_snp);
	wsReal *Ra_beta1 = V_beta1.get();
	memcpy(Ra_beta1, Xp_full->Ra_hatBeta+1, sizeof(wsReal)*N_snp);
//	cVector V_beta1(Xp_full->Ra_hatBeta+1, N_snp, 1);
	sseFree(Xp_full->Ra_hatBeta);
	sseFree(Xp_full->Ra_residual);
	DEALLOC(Xp_full);
	cVector V_aW;
	if (M_W.get() == NULL)
		V_aW = V_alpha * *((cIdtMatrix *)&M_W);
	else
		V_aW = V_alpha * *((cDiagMatrix *)&M_W);
	wsReal R_poolVar = V_aW.qf(M_vv);

	/* beta.pool <- aW%*%beta1 */
	wsReal R_poolBeta = sseVV(V_aW.get(), N_snp, V_beta1.get());

	/* z.score<-beta.pool/sqrt(var.pool) */
	wsReal R_zQ1 = R_poolBeta / sqrt(R_poolVar);
	wsReal R_pQ1 = PVchisq(SQR(R_zQ1), 1.0);
	wsReal R_zQ2 = WISARD_NAN;

	/* Do EVD on vv
	 * Q2.eigen<-eigen(vv);U2<-Q2.eigen$vectors; l2<-Q2.eigen$values; */
	wsReal R_pQ2 = _decomp(M_vv, V_beta1, &R_zQ2);
	wsReal R_pQ3 = WISARD_NAN;

	*Rp_zQ1 = SQR(R_zQ1);
	*Rp_zQ2 = R_zQ2;

	/* Do Q3 only if Q2 is valid */
	if (R_pQ2 == R_pQ2 && R_pQ1 == R_pQ1) {

		/*

		if(weight==FALSE){
		c(t(alpha)%*%vv)->cov.beta
		b.star<-beta1-beta.pool0*cov.beta/var.pool0[1]
		vv.star<-vv-(cov.beta%*%t(cov.beta))/var.pool0[1]
		}
		if(weight==TRUE){
		w.vv<-WS%*%vv%*%WS
	
		b.star<-WS%*%beta1-beta.pool*cov.beta/var.pool[1]
		vv.star<-w.vv-(cov.beta%*%t(cov.beta))/var.pool[1]
		}

		*/
/**/	cSymMatrix M_WV;
		if (M_W.get() == NULL)
			M_WV = M_vv;
		else
			M_WV = ((cDiagMatrix *)&M_W)->MMt(M_vv);
		M_vv.rem();

		/* c(t(alpha)%*%w.vv)->cov.beta */
		cVector V_covBeta = V_alpha * M_WV;
		cVector V_bStarSub = V_covBeta * (R_poolBeta / R_poolVar);

		/* WS %*% beta1
		 * b.star<-WS%*%beta1-beta.pool*cov.beta/var.pool[1] */
		cVector V_bStar = M_W * V_beta1;
		V_bStar -= V_bStarSub;

		/* vv.star<-w.vv-(cov.beta%*%t(cov.beta))/var.pool[1] */
		wsSym Ra_cb2 = sseVtV(V_covBeta.get(), V_covBeta.size());
		sseSpC((wsSymCst)Ra_cb2, W1 / R_poolVar, Ra_cb2, V_covBeta.size());
/**/	cSymMatrix M_vvStarSub(Ra_cb2, V_covBeta.size());
/**/	cSymMatrix M_vvStar = M_WV - M_vvStarSub;
		M_vvStarSub.rem();
		M_WV.rem();

		/* q3   <- my.eigen(vv.star, T) */
		//wsReal R_q2 = WISARD_NAN;
		wsReal R_pQ2star	= _decomp(M_vvStar, V_bStar, NULL);
		M_vvStar.rem();

		/* Q2.1 <- qchisq(q3, df=1, lower.tail=FALSE) */
		wsReal	R_qQ2star	= W0;
		double	R_retInp	= 0.0;
		int		N_which		= 2, N_stat;
		double	R_pValInp	= 1.0 - (double)R_pQ2star;
		double	R_bound;
		double	R_df		= 1.0;
		double	R_nc		= 0.0;
		if (R_pValInp == 1.0) /* In case of invalid range */
			R_pQ2star = numeric_limits<wsReal>::infinity();
		else
			cdfchn(&N_which, &R_pValInp, NULL, &R_retInp, &R_df,
				&R_nc, &N_stat, &R_bound);
		R_pQ2star = PVchisq(R_retInp, 1.0);

#define N_Q3INTERVALS 11
/**/	double *Ra_Q3can = NULL;
		sseMalloc(Ra_Q3can, double, N_Q3INTERVALS);
		Ra_Q3can[0] = (double)R_pQ2star;
		Ra_Q3can[N_Q3INTERVALS-1] = (double)R_pQ1;
		wsReal R_Q1 = SQR(R_zQ1);
		wsReal R_Q3min = R_pQ2star > R_pQ1 ? R_pQ1 : R_pQ2star;
		for (wsUint i=1 ; i<(N_Q3INTERVALS-1) ; i++) {
			/* Q3          <- pi0[h]*Q1+(1-pi0[h])*Q2.1 */
			wsReal R_pi0	= (wsReal)i / (wsReal)(N_Q3INTERVALS-1);
			wsReal R_Q3		= R_pi0*R_Q1 + (W1-R_pi0)*R_qQ2star;

			/* p.Q3.can[h] <- davies(Q3,c(pi0[h],(1-pi0[h])),c(1,1))$Qq */
			double Ra_ld[2]	= { (double)R_pi0, 1.0-(double)R_pi0 };
			Ra_Q3can[i]		= davies(R_Q3, Ra_ld, 2);

			/* Adjustment */
//				Ra_Q3can[i] > W1)
				/* p.Q3.can[h]<-imhof(Q3,c(pi0[h],(1-pi0[h])),c(1,1))$Qq */
//				Ra_Q3can[i] = imhof(Q3,c(pi0[h],(1-pi0[h])),c(1,1))$Qq
		
			if (Ra_Q3can[i] < 0.0 || Ra_Q3can[i] > 1.0)
				/* p.Q3.can[h]<-liu(Q3,c(pi0[h],(1-pi0[h])),c(1,1))[1] */
				Ra_Q3can[i] = liuEV(Ra_Q3can[i], Ra_ld, 2);

			if (Ra_Q3can[i] < R_Q3min)
				R_Q3min = Ra_Q3can[i];
		}
		sseFree(Ra_Q3can);
		if (R_Q3min == W0) {
			R_pQ3 = 0;
		} else {
			wsReal R_q = -log(R_Q3min) / log(REAL_CONST(10.0)) * REAL_CONST(1000.0);
			wsUint N_q = (wsUint)R_q;
			wsUint N_cumSum = 1;
			for (wsUint i=N_q+1 ; i<WISARD_QTEST_N_PBIN ; i++)
				N_cumSum += Na_null[i];

			R_pQ3 = (wsReal)N_cumSum / (wsReal)(WISARD_QTEST_TOTN+1);
		}
	}
	Ra_pVals[0] = R_pQ1;
	Ra_pVals[1] = R_pQ2;
	Ra_pVals[2] = R_pQ3;

	if (Xp_cur0 != Xp_0) {
		sseFree(Xp_cur0->Ra_residual);
		sseFree(Xp_cur0->Ra_hatBeta);
		deallocMatrix(Xp_cur0->Ra_covBeta, 1+Cp_IO->sizeCovar(), (void *)1);
		delete Xp_cur0;
	}
	
	/* z.score0<-(t(alpha)%*%beta1)/sqrt(t(alpha)%*%vv%*%alpha) */
// 	wsReal R_z0 = sseVV(Ra_alpha, N_snp, Xp_full->Ra_hatBeta+1)
// 		/ sqrt(sseVpMpV(Ra_alpha, Ra_vv, N_snp));

	// p.Q1<-pchisq(z.score0^2,df=1,lower.tail=F)
//	wsReal R_q1 = chiprobP(SQR(R_z0), W1);

//	if (OPT_ENABLED(qtestgamma)) {
		/*
		*					p0<-pchisq((beta1/se1)^2,df=1,lower.tail=F)
		p<-c(p.Q1,p0) 
		GM<-2*sum(qgamma(p0,a,1,lower.tail=F))
		uu.GM<-EV.perm[2]/(2*EV.perm[1]);vv.GM<-2*EV.perm[1]^2/EV.perm[2]
		p.Q0<-pchisq(GM/uu.GM,df=vv.GM,lower.tail=F)
		IG<-2*sum(qgamma(p,a,1,lower.tail=F))
		uu.IG<-EV.perm[4]/(2*EV.perm[3]);vv.IG<-2*EV.perm[3]^2/EV.perm[4]
		p.Q<-pchisq(IG/uu.IG,df=vv.IG,lower.tail=F)
*/
//	} else {
		// chistat<-t(beta1)%*%solve(vv)%*%beta1
//		wsReal R_chiStat = sseVpMpV(Xp_full->Ra_hatBeta+1, Ra_vv, N_snp);
		// p.Q0<-pchisq(chistat,lower.tail=F,df=length(beta1))
//		wsReal R_q0 = chiprobP(R_chiStat, REAL_CONST(N_snp));
		// p.Q<-pchisq((chistat+z.score0^2)*(length(beta1)+1)/(length(beta1)+3),
		//	df=((length(beta1)+1)^2)/(length(beta1)+3),lower.tail=F)
//		wsReal R_q = chiprobP((R_chiStat+SQR(R_z0))*(wsReal)(N_snp+1)/(wsReal)(N_snp+3),
//			(wsReal)((N_cov+1)*(N_cov+1))/(wsReal)(N_cov+3));
//	}
	/**
	QTest.one<-function(y,covadat=NULL,newgeno,yname,cut.r2=0.05, use.GM=FALSE,n.perm=200,a=0.2, EV.perm){
		if(length(covadat)!=0){resid<-resid(glm(y~.,data=data.frame(covadat),na.action=na.exclude))}
		if(length(covadat)==0){resid<-resid(glm(y~1,na.action=na.exclude))}
		fit<-try(glm(resid~.,data=data.frame(newgeno)),TRUE)
		coef<-try(coef(summary(fit))[-1,1:2],TRUE)
		if(mode(fit)=="character"){length(coef)<-0}
		if(length(coef)!=0){
			vv<-vcov(fit)[-1,-1]
			if(length(coef)!=2){beta1<-coef[,1];se1<-coef[,2]}
			if(length(coef)==2){beta1<-coef[1];se1<-coef[2]}
			invSqse <- 1/(se1^2)
			alpha<- invSqse/sum(invSqse)
			z.score0<-(t(alpha)%*%beta1)/sqrt(t(alpha)%*%vv%*%alpha)

			if(use.GM==FALSE){
			} else {
			}


		}
		if(length(coef)==0){p.Q1<-p.Q0<-p.Q<-NA}
		rslt<-data.frame(p.Q1=p.Q1,p.Q0=p.Q0,p.Q=p.Q)
		rownames(rslt)<-1:nrow(rslt)
		options (warn=-1)
		return(rslt)

	}*/


	/* Dealloc genotype matrix */
//	sseUnmat(Ra_geno, N_curSamp);
}

void cQtestAnalysis::run()
{
	getIO()->getMAF();
	mGeneDef&	Xm_gdef		= Cp_anaGsm->getGeneDef();
	xMaf*		Xp_maf		= Cp_IO->getMAF();
	xOptRange&	X_rng		= OPT_RANGE(qtestrange);
	wsUint		N_samp		= Cp_IO->sizeSample();
	char**		Na_data		= Cp_IO->getGenotype();
/**/cExporter*	Cp_qtest	= cExporter::summon("qtest.res");
	char		S_bufAvail[256] = { 0, };
	char		S_bufClump[256] = { 0, };

	/* Fitting null model and get residual */
	//wsUint	N_cov		= Cp_IO->getCovariateSize();

	LOGoutput("Result of Q-test is exported to [%s.qtest.res]\n",
		OPT_STRING(out));

	/* Imp */
	if (OPT_ENABLED(avail)) {
		strcpy(S_bufAvail, "	NAVAIL");
		LOG("[NOTE] Q-test do not impute missing genotypes, it takes more time...\n");
	}
	/* Clump */
	if (OPT_ENABLED(qtestclump)) strcpy(S_bufClump, "	NAFTERCLUMP");

	/* Export header */
	Cp_qtest->fmt("NAME	SZSET	NVARIANT%s	MAC%s	P_Q1	P_Q2	P_Q3	Z_Q1	Z_Q2\n",
		S_bufClump, S_bufAvail);

	/* Load weight */
//	wsReal	*Ra_W = _makeWeight();
	wsMat Ra_pVals = sseMatrix((wsUint)Xm_gdef.size(), 4);

	mDataIdx Xm_gene2storePos;
	wsUint I=0;
	FOREACHDO (mGeneDef_it, Xm_gdef, it, I++) {
		vInt	Xa_set;
		wsUint	N_mac = 0;

		Xm_gene2storePos[it->first] = I;

		/* Re-define gene set by their MAF */
		map<__int64,wsUint> Xm_map;
		FOREACH (vInt_it, it->second, iit)
			if (isInRange(X_rng, Xp_maf[*iit].R_maf)) {
				/* Check mac if defined */
				if ((IS_ASSIGNED(filmac) && isInRange(OPT_RANGE(filmac), Xp_maf[*iit].N_allMac)) ||
					(IS_ASSIGNED(incmac) && !isInRange(OPT_RANGE(incmac), Xp_maf[*iit].N_allMac))) continue;

				/* Check MAC again, and make pattern */
				__int64 N_sig = 0;
				wsUint	i = 0;
				for (i=0 ; i<N_samp ; i++) {
					if (Ba_misPheno[i]) continue;
					if (Na_data[i][*iit] && !isMissing(Na_data[i][*iit]))
						N_sig += (i+1);
				}
				if (N_sig == 0) continue;
				/* Check possibility of duplication */
				map<__int64,wsUint>::iterator X_find = Xm_map.find(N_sig);
				if (X_find != Xm_map.end()) {
					/* Check with that index */
					for (i=0 ; i<N_samp ; i++) {
						if (Ba_misPheno[i]) continue;
						if (Na_data[i][X_find->second] != Na_data[i][*iit])
							break;
					}
					/* Really it is */
					if (i == N_samp)
						continue;
				}
				Xm_map.insert(make_pair(N_sig, *iit));
				Xa_set.push_back(*iit);
				N_mac += Xp_maf[*iit].N_allMac;
			}

		/* Make weight */
//		cDiagMatrix M_weight((wsUint)Xa_set.size());
//		wsReal *Ra_weight = M_weight.get()[0];
//		wsUint J=0;
//		FOREACHDO (vInt_it, Xa_set, iit, J++)
//			Ra_weight[J] = Ra_W[*iit];

		/* Perform test */
		wsReal	*R_pVals = Ra_pVals[I];
		R_pVals[0] = WISARD_NAN;
		R_pVals[1] = WISARD_NAN;
		R_pVals[2] = WISARD_NAN;

		wsUint	N_szAfter	= 0; /* Number of markers after all filtering */
		wsUint	N_sampAfter	= 0; /* Number of samples after all filtering */

		/*(Xa_set.size() && !IS_ASSIGNED(filmac) && !IS_ASSIGNED(incmac)) ||
			(Xa_set.size() && IS_ASSIGNED(filmac) && !isInRange(OPT_RANGE(filmac), N_mac)) ||
			(Xa_set.size() && IS_ASSIGNED(incmac) && isInRange(OPT_RANGE(incmac), N_mac))) {
			
			130627 Note
			This condition has deprecated due to the check mac changed to the check of mac
			for each snps */
		if (Xa_set.size() > 1) {
			wsReal R_zQ1 = WISARD_NAN;
			wsReal R_zQ2 = WISARD_NAN;
			_doTest(it->first.c_str(), Xp_0, Xa_set, Cp_IO->getPheno(),
				Cp_IO->sizeSample(), Na_data, R_pVals, &N_szAfter,
				&N_sampAfter, &R_zQ1, &R_zQ2);
			
			/* if --remna check all NA */
			if (OPT_ENABLED(remna)) {
				wsUint x=0;
				for (wsUint x=0 ; x<3 ; x++)
					if (R_pVals[x] == R_pVals[x]) break;
				if (x == 3)
					continue;
			}

			if (OPT_ENABLED(avail))			sprintf(S_bufAvail, "	%d", N_sampAfter);
			if (OPT_ENABLED(qtestclump))	sprintf(S_bufClump, "	%d", N_szAfter);

			/* Print mandatory */
			Cp_qtest->fmt("%s	%d	%d%s	%d%s", it->first.c_str(),
				it->second.size(), Xa_set.size(), S_bufClump, N_mac, S_bufAvail);

			/* Print Q1~Q3 */
			for (wsUint x=0 ; x<3 ; x++)
				if (R_pVals[x] != R_pVals[x])
					Cp_qtest->put("	NA");
				else
					Cp_qtest->fmt("	%g", R_pVals[x]);
			Cp_qtest->fmt("	%g	%g", R_zQ1, R_zQ2);
			Cp_qtest->put("\n");

			R_pVals[3] = (wsReal)N_szAfter;
		} else if (!OPT_ENABLED(remna)) {
			if (OPT_ENABLED(avail)) strcpy(S_bufAvail, "	NA");
			if (OPT_ENABLED(qtestclump)) strcpy(S_bufClump, "	NA");

			Cp_qtest->fmt("%s	%d	%d%s	%d%s	NA	NA	NA	NA	NA\n", it->first.c_str(),
				it->second.size(), Xa_set.size(), S_bufAvail, N_mac,
				S_bufClump);
		}

		notice("%d/%d Q-tested...\r", I, Xm_gdef.size());
	}
	LOG("%d/%d Q-tested...\r", Xm_gdef.size(), Xm_gdef.size());

	/* If there are gene-set definition */
	if (IS_ASSIGNED(geneset)) {
		mGeneSet&		Xa_gs		= Cp_anaGsm->getGeneSetDef();
		mDataIdx&		Xa_gsz		= Cp_anaGsm->getGeneSetOrigSize();
		LOG("Perform gene-set level Q-test [%d gene-sets]...\n", Xa_gs.size());
		cTableExporter	C_qtest("gs.qtest.res", "siiirrrrrrrr",
			"Gene-set-level Q-test result", 0, 12, "GENESET", "NORIGENE",
			"NGENE", "NVARIANT", "P1b", "P2b", "P3b", "P1q", "P2q", "P3q",
			"P1z", "P2z");

		FOREACH (mGeneSet_it, Xa_gs, i) {
			vInt	Xa_set;
			vStr&	X_gs	= i->second;

			wsReal	R_Q1	= W0;
			wsReal	R_Q2	= W0;
			wsReal	R_Q3	= W0;
			wsUint	N_sz	= 0;
			wsUint	N_msz	= 0;

			FOREACH (vStr_it, X_gs, j) {
				wsUint	k	= Xm_gene2storePos[*j];
				/* Pass if at least one is NA */
				if (NA(Ra_pVals[k][0]) || NA(Ra_pVals[k][1]) ||
					NA(Ra_pVals[k][2])) continue;
				N_sz++;
			}
			if (N_sz == 1) continue;
 
			/* Do QS */
			map<__int64,wsUint> Xm_map;
			FOREACH (vStr_it, X_gs, j) {
				vInt &X_gene = Xm_gdef[*j];

				wsUint	k	= Xm_gene2storePos[*j];
//				wsReal	R_a	= getA((wsUint)Ra_pVals[k][3], R_stt);
				wsReal	R_a	= getA(N_sz, R_stt);

				/* Pass if at least one is NA */
				if (Ra_pVals[k][0] != Ra_pVals[k][0] ||
					Ra_pVals[k][1] != Ra_pVals[k][1] ||
					Ra_pVals[k][2] != Ra_pVals[k][2])
					continue;
					 
				R_Q1 += qgamma(Ra_pVals[k][0], R_a, 1.0, 0);
				R_Q2 += qgamma(Ra_pVals[k][1], R_a, 1.0, 0);
				R_Q3 += qgamma(Ra_pVals[k][2], R_a, 1.0, 0);
				//N_sz++;
				N_msz += (wsUint)Ra_pVals[k][3];
				
				FOREACH (vInt_it, X_gene, q) {
					/* Check MAC again, and make pattern */
					__int64	N_sig	= 0;
					wsUint	i		= 0;

					for (i=0 ; i<N_samp ; i++) {
						if (Ba_misPheno[i]) continue;
						if (Na_data[i][*q] && !isMissing(Na_data[i][*q]))
							N_sig += (i+1);
					}
					if (N_sig == 0) continue;
					/* Check possibility of duplication */
					map<__int64,wsUint>::iterator X_find = Xm_map.find(N_sig);
					if (X_find != Xm_map.end()) {
						/* Check with that index */
						for (i=0 ; i<N_samp ; i++) {
							if (Ba_misPheno[i]) continue;
							if (Na_data[i][X_find->second] != Na_data[i][*q])
								break;
						}
						/* Really it is */
						if (i == N_samp)
							continue;
					}
					Xa_set.push_back(*q);
				}
			}

			/* Do BS */
			wsUint N_szAfter = 0;
			wsUint N_sampAfter = 0;
			wsReal R_pVals[3] = { WISARD_NAN, };
			wsReal R_zQ1 = WISARD_NAN;
			wsReal R_zQ2 = WISARD_NAN;
			if (Xa_set.size())
				_doTest(i->first.c_str(), Xp_0, Xa_set, Cp_IO->getPheno(),
					Cp_IO->sizeSample(), Na_data, R_pVals, &N_szAfter,
					&N_sampAfter, &R_zQ1, &R_zQ2);

			wsReal	R_qA	= getA(N_sz, R_stt);
			wsReal	R_p1	= PVchisq(R_Q1*2.0, 2.0*R_qA*N_sz);
			wsReal	R_p2	= PVchisq(R_Q2*2.0, 2.0*R_qA*N_sz);
			wsReal	R_p3	= PVchisq(R_Q3*2.0, 2.0*R_qA*N_sz);

			/* --remna */
			if (OPT_ENABLED(remna) && NA(R_p1) && NA(R_p2) && NA(R_p3))
				continue;

			char S_pVals1[256];
			char S_pVals2[256];
			char S_pVals3[256];
			char S_z1[256];
			char S_z2[256];
			if (NA(R_pVals[0]) || NA(R_zQ1)) strcpy(S_pVals1, "NA"); else sprintf(S_pVals1, "%g", R_pVals[0]);
			if (NA(R_pVals[1]) || NA(R_zQ2)) strcpy(S_pVals2, "NA"); else sprintf(S_pVals2, "%g", R_pVals[1]);
			if (NA(R_pVals[2]) || NA(R_zQ2) || NA(R_zQ1)) strcpy(S_pVals3, "NA"); else sprintf(S_pVals3, "%g", R_pVals[2]);
			if (NA(R_zQ1)) strcpy(S_z1, "NA"); else sprintf(S_z1, "%g", R_zQ1);
			if (NA(R_zQ2)) strcpy(S_z2, "NA"); else sprintf(S_z2, "%g", R_zQ2);

			if (Xa_set.size())
				C_qtest.write(12, i->first.c_str(), Xa_gsz[i->first],
					i->second.size(), Xa_set.size(),
					S_pVals1, S_pVals2, S_pVals3,
					R_p1, R_p2, R_p3, S_z1, S_z2);
			else {
				if (!N_sz) {
					if (!OPT_ENABLED(remna))
						C_qtest.write(12, i->first.c_str(), Xa_gsz[i->first],
							i->second.size(), Xa_set.size(),
							"<NA>", "<NA>", "<NA>", WISARD_NAN, WISARD_NAN,
							WISARD_NAN, WISARD_NAN, WISARD_NAN);
				} else C_qtest.write(12, i->first.c_str(), Xa_gsz[i->first],
					i->second.size(), Xa_set.size(),
					"<NA>", "<NA>", "<NA>", R_p1, R_p2, R_p3, S_z1, S_z2);
			}
		}
	}

	sseUnmat(Ra_pVals, (wsUint)Xm_gdef.size());
}

#endif

} // End namespace ONETOOL
