====================================
 Welcome to the INFOQC Make System!
====================================

===========================
FILE/DIRECTORY ORGANIZATION
===========================

How files are organized in the INFOQC tree (files relevant to the make system)

1. Code for specific modules (libraries):

	[ROOT]/src/c++/[module]/Makefile
	[ROOT]/src/c++/[module]/*.cpp
	[ROOT]/src/c++/include/[module]/*.h, *.ipp

2. Suite-wide makefile:

	[ROOT]/src/c++/Makefile

3. Configuration files for the make system:

	[ROOT]/src/config/Global.make
	[ROOT]/src/config/Rules.make
	[ROOT]/src/config/Platform.make
	[ROOT]/src/config/arch
	[ROOT]/src/config/[architecture]/Global.make

============
RUNNING MAKE
============

Two major locations in which you can run make:

	[ROOT]/src/c++          - To make the entire INFOQC tree.
	[ROOT]/src/c++/[module] - To build a single 'module' (library, that is).

If you want to build the whole INFOQC suite:

	1. Go into [ROOT]/src/c++
	2. Run 'make'

Or, if you only want to a specific module:

	1. Go into [ROOT]/src/c++/[module]
	2. Run 'make'

What actually happens when you run 'make':

	1. The Makefile defines $(INFOQCROOT) relative to the current directory (where
	   INFOQCROOT points to [ROOT]/src), and then loads $(INFOQCROOT)/config/Global.make, 
	   which sets up all sorts of global compiling/linking options, as well as architecture- and
	   compiler-specific options.

	2. The Makefile defines $(TARGETS) (the list of objects to build), as well
	   as special rules for those targets.

	3. The Makefile loads $(INFOQCROOT)/config/Rules.make, which instructs 'make'
	   to start building $(TARGETS).

So it's a three-step process: Load in the global settings, establish which
targets to build, then build those targets. For the most part, as a INFOQC
developer you will only need to worry about step #2 (target-specific
options) for module-specific makefiles. The following section of this helpfile 
will address how to customize your module's Makefile. Later on, this helpfile 
will delve into the more arcane aspects of how step #1 and step #3 are carried out.


For the most part, you'll spend much of your time running make in three ways: 'make cleanall',
'make', and 'make test'.

Any commandline argument to make that is a single word tells make to follow a certain ruleset.
If no such argument is given (eg: 'make'), make follows a default ruleset and builds everything that
the Makefile defines as $(TARGETS).

'make cleanall' deletes all object files on which 'make' would depend. You should use this whenever
there has been a change in one of your .h's (or .ipp's), since make *cannot* detect changes in dependent
header files. Changes to .cpp's *are* detected by make, so it is sufficient to run 'make' when such
changes have been made.

'make test' is used for building and executing $(TESTTARGETS). More on testing later.


In addition to specifying rulesets via single-word commandline arguments (see above), you can also
specify a number of options with the commandline arguments form KEY=VALUE. For instance, 'make
BUILD=DEBUG' will build INFOQC with 'BUILD' set to 'DEBUG'. A complete list of variables follows:

	BUILD - Defines the build type (where each build type has its own special compiler and linker
		flags. Valid values include:

		DEBUG   - This is the default build type. Symbolic names will be preserved.
		RELEASE - This is for building publicly release-able versions. Symbolic names will
			  be stripped and performance options enabled.
		PROFILE - This is for generating an executable that can be debugged with gdb. More
			  on this later.

	AUTOTRACE - Turns on runtime reporting of functions defined using the AUTOTRACE macro (see
		    reference on INFOQC::APP::AutoTrace for more information). Valid values include:

		ON - Enables the feature



===========================
CUSTOMIZING MODULE MAKEFILE
===========================

At the beginning of a module's Makefile, $(INFOQCROOT) is defined
and $(INFOQCROOT)/config/Global.make is included.
Then there's a part that needs to be modified accordingly in the middle,
and $(INFOQCROOT)/config/Rules.make is followed at the end.

The middle part between these two include directives are that we're concerned with here.
All the relevant variables:

	TARGETS     - A list of targets to build (usually libfoo.a and foo for most programs)
	TESTTARGETS - A list of targets to build when testing (more on this later)
	TESTS       - More stuff for testing (more on this later)
	SRCS        - A list of all the .cpp's you'll need to build your program
	OBJS        - A rule for building a list of object files (usually ${SRCS:.cpp=.o} )

For example, if your module is called 'foofoo'. Then the Makefile will look something this:

	TARGETS     = libfoofoo.a foo$(EXE)
	SRCS        = file1.cpp file2.cpp file3.cpp
	OBJS        = ${SRCS:.cpp=.o}

For each 'target-specific' options (such as 'libfoofoo.a' and 'foo$(EXE)' above):

	$(TARGET).NAME     - The pretty-print name of the target
	$(TARGET).INSTALL  - For executables, should be yes. More on this later.
	$(TARGET).TYPE     - Usually either LIB or C++ (for libraries or executables)
	$(TARGET).OBJS     - A list of object files (usually either $(OBJS) or [TARGET].o )
	$(TARGET).CXXFLAGS - Additional compiler flags
	$(TARGET).CP       - For libraries, should read ../lib/[TARGET]
	$(TARGET).DEP      - For executables, should read lib[TARGET] if the executable is based on a library
	$(TARGET).LDLIBS   - Additional libraries that must be linked to an executable

With the previous example, the Makefile should have options specified for both targets (libfoofoo.a and foo$(EXE)):

	libfoofoo.a.NAME     = "Foofoo library"
	libfoofoo.a.TYPE     = LIB
	libfoofoo.a.OBJS     = $(OBJS)
	libfoofoo.a.CXXFLAGS = # Special flags put here
	libfoofoo.a.CP       = ../lib/libfoofoo.a

	foo$(EXE).NAME    = Foo Application
	foo$(EXE).INSTALL = yes
	foo$(EXE).TYPE    = C++
	foo$(EXE).OBJS    = foo.o
	foo$(EXE).DEP     = libfoofoo.a
	foo$(EXE).LDLIBS  = # List libraries here, such as -lfoofoo -ldata -lsampling -lapp ...

==============================
$(INFOQCROOT)/config/Global.make
==============================

This file defines the global variables required to build INFOQC.
